{"componentChunkName":"component---src-templates-blog-template-js","path":"/b-improve-query/","result":{"data":{"cur":{"id":"8b868113-03c0-5a76-b495-aadd07c24a27","html":"<h2 id=\"추천비추천-로직-개선\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%B2%9C%EB%B9%84%EC%B6%94%EC%B2%9C-%EB%A1%9C%EC%A7%81-%EA%B0%9C%EC%84%A0\" aria-label=\"추천비추천 로직 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추천/비추천 로직 개선</h2>\n<p>Q&#x26;A 추천/비추천 로직을 이전에는 아래와 같이 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Q&amp;A 추천 로직 코드</span>\n<span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createLike</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> qnaId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">QnA</span> qna <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkQnAValidate</span><span class=\"token punctuation\">(</span>qnaId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">QnALikeDislikeId</span> id <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QnALikeDislikeId</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">,</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tqnaLikeDislikeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresentOrElse</span><span class=\"token punctuation\">(</span>\n\t        result <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t                <span class=\"token keyword\">case</span> <span class=\"token class-name\">G</span><span class=\"token operator\">:</span>\n\t                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateDeleteStatus</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\n\t                <span class=\"token keyword\">case</span> <span class=\"token class-name\">B</span><span class=\"token operator\">:</span>\n\t                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getIsDeleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t                        qnaLikeDislikeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">recoverLikeDislike</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">,</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t                    <span class=\"token punctuation\">}</span>\n\t                    qnaLikeDislikeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">updateQnALikeStatusToGood</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">,</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t            <span class=\"token punctuation\">}</span>\n\t        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t            <span class=\"token class-name\">QnALikeDislike</span> likeDislike <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QnALikeDislike</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LikeStatus</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"G\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t            qnaLikeDislikeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>likeDislike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token punctuation\">}</span>\n\t    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateLikesAndDislikes</span><span class=\"token punctuation\">(</span>qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateDeleteStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QnALikeDislike</span> likeDislike<span class=\"token punctuation\">,</span> <span class=\"token class-name\">QnALikeDislikeId</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>likeDislike<span class=\"token punctuation\">.</span><span class=\"token function\">getIsDeleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        qnaLikeDislikeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">getQna</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        qnaLikeDislikeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">recoverLikeDislike</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">getQna</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// repository</span>\n<span class=\"token annotation punctuation\">@Modifying</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>\n        value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE QnALikeDislike \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"SET status = 'G' \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"WHERE id.member = :member AND id.qna = :qna AND isDeleted = false\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateQnALikeStatusToGood</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qna\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">QnA</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Modifying</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE QnALikeDislike \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"SET status = 'B' \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"WHERE id.member = :member AND id.qna = :qna AND isDeleted = false\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateQnALikeStatusToBad</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qna\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">QnA</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Modifying</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE QnALikeDislike \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"SET isDeleted = true \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"WHERE id.member = :member AND id.qna = :qna\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qna\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">QnA</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>기존 추천/비추천 로직은 다음과 같다.</p>\n<ol>\n<li>\n<p>qnaId, memberId를 이용해 추천/비추천 데이터를 findById로 받아온다.</p>\n</li>\n<li>\n<p>만약 데이터가 있는 경우, 아래와 같이 데이터를 처리한다. (추천 로직 기준으로 설명한다.)</p>\n<ol>\n<li><code class=\"language-text\">G(추천)</code>, <code class=\"language-text\">B(비추천)</code> 여부를 받아온다.</li>\n<li>만약 <strong>상태가 추천</strong>이라면, 삭제가 안 된 경우 추천 취소로 인식하고 해당 데이터를 삭제한다.</li>\n<li><strong>상태가 추천</strong>인데 삭제된 경우 다시 복구 시킨다. (다시 추천)</li>\n<li><strong>상태가 비추천</strong>인 경우, 만약 해당 데이터가 삭제되었으면 복구 후 추천 상태로 변경한다. (B → G)</li>\n</ol>\n</li>\n<li>\n<p>데이터가 없는 경우 새로 만들어준다.</p>\n</li>\n</ol>\n<p>하지만 생각해보니,, 데이터를 굉장히 비효율적으로 처리한다는 생각이 들었다. 🥲</p>\n<p>일반적으로 쿼리를 두번 사용하는 것보다 한 번에 요청하는 것이 더 효율적인 것으로 알고 있다.</p>\n<p>그래서 고민 끝에 쿼리를 아래와 같이 수정해 로직을 개선했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createQnALike</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> qnaId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">QnA</span> qna <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQnA</span><span class=\"token punctuation\">(</span>qnaId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">QnALikeDislikeId</span> id <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QnALikeDislikeId</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">,</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    qnaLikeDislikeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresentOrElse</span><span class=\"token punctuation\">(</span>\n            result <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token class-name\">G</span><span class=\"token operator\">:</span>\n                        qnaLikeDislikeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">updateDeleteStatus</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">,</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">case</span> <span class=\"token class-name\">B</span><span class=\"token operator\">:</span>\n                        qnaLikeDislikeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">updateQnALikeStatusToGoodOrBad</span><span class=\"token punctuation\">(</span>\n                            member<span class=\"token punctuation\">,</span>\n                            qna<span class=\"token punctuation\">,</span>\n                            <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">LikeStatus<span class=\"token punctuation\">.</span>G</span>\n                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">QnALikeDislike</span> likeDislike <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QnALikeDislike</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LikeStatus</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"G\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                qnaLikeDislikeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>likeDislike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateLikesAndDislikes</span><span class=\"token punctuation\">(</span>qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// repository</span>\n<span class=\"token annotation punctuation\">@Modifying</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>\n        value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE QnALikeDislike \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"SET status = :status, isDeleted = :isDeleted \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"WHERE id.member = :member AND id.qna = :qna\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateQnALikeStatusToGoodOrBad</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qna\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">QnA</span> qna<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isDeleted\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Boolean</span> isDeleted<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">LikeStatus</span> status\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT COUNT(q) \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"FROM QnALikeDislike q \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"WHERE q.id.qna = :qna AND q.status = :status AND q.isDeleted = :isDeleted\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">countQnALikeOrDislikeByQnAId</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qna\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">QnA</span> qna<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">LikeStatus</span> status<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isDeleted\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Boolean</span> isDeleted\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Modifying</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE QnALikeDislike \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"SET isDeleted = IF(isDeleted, false, true) \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"WHERE id.member = :member AND id.qna = :qna\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateDeleteStatus</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qna\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">QnA</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>개선한 점은 다음과 같다.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">G(추천)</code>, <code class=\"language-text\">B(비추천)</code> 여부를 받아온다.</p>\n</li>\n<li>\n<p>만약 <strong>상태가 추천</strong>이라면, IF 함수를 사용해서 삭제된 경우 삭제 취소, 삭제되지 않은 경우 삭제하도록 쿼리를 변경했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> isDeleted <span class=\"token operator\">=</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">(</span>isDeleted<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><strong>상태가 비추천</strong>인 경우, 삭제 여부랑 상관없이 <code class=\"language-text\">isDeleted = false</code>로 변경한 후 상태를 G로 변경한다.</p>\n</li>\n</ol>\n<p>기존 로직과 달리 쿼리를 한 번만 실행하기 때문에 로직 및 속도를 개선할 수 있었다.</p>\n<p>추가적으로 바인딩 변수를 사용하도록 JPQL 쿼리를 수정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 기존</span>\n<span class=\"token annotation punctuation\">@Modifying</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>\n        value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE QnALikeDislike \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"SET status = 'G' \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"WHERE id.member = :member AND id.qna = :qna AND isDeleted = false\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateQnALikeStatusToGood</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qna\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">QnA</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Modifying</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE QnALikeDislike \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"SET status = 'B' \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"WHERE id.member = :member AND id.qna = :qna AND isDeleted = false\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateQnALikeStatusToBad</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qna\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">QnA</span> qna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 개선</span>\n<span class=\"token annotation punctuation\">@Modifying</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>\n        value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE QnALikeDislike \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"SET status = :status, isDeleted = :isDeleted \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"WHERE id.member = :member AND id.qna = :qna\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateQnALikeStatusToGoodOrBad</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qna\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">QnA</span> qna<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isDeleted\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Boolean</span> isDeleted<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">LikeStatus</span> status\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>바인딩 변수를 사용하면 아래와 같은 장점이 있다. (from 친절한 SQL 튜닝)</p>\n<p><a href=\"https://github.com/yu-heejin/kind-SQL-tuning/blob/main/1%EC%9E%A5/1.2_SQL_%EA%B3%B5%EC%9C%A0_%EB%B0%8F_%EC%9E%AC%EC%82%AC%EC%9A%A9.md\"></a></p>\n<ul>\n<li>\n<p>SQL의 경우, 캐시에 저장될 때 별도의 이름이 따로 없고, SQL문 자체가 이름이 된다.</p>\n</li>\n<li>\n<p>따라서 기존 SQL의 경우, 두 SQL문이 별도로 라이브러리 캐시에 저장된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> QnALikeDislike\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">=</span> <span class=\"token string\">'G'</span>\n<span class=\"token keyword\">WHERE</span> id<span class=\"token punctuation\">.</span>member <span class=\"token operator\">=</span> :member <span class=\"token operator\">AND</span> id<span class=\"token punctuation\">.</span>qna <span class=\"token operator\">=</span> :qna <span class=\"token operator\">AND</span> isDeleted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">UPDATE</span> QnALikeDislike\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span>\n<span class=\"token keyword\">WHERE</span> id<span class=\"token punctuation\">.</span>member <span class=\"token operator\">=</span> :member <span class=\"token operator\">AND</span> id<span class=\"token punctuation\">.</span>qna <span class=\"token operator\">=</span> :qna <span class=\"token operator\">AND</span> isDeleted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n</li>\n<li>\n<p>하지만 바인딩 변수를 사용할 경우, <strong>캐시에는 단 하나의 쿼리문만 저장되기 때문에 캐시 공간을 절약할 수 있다.</strong></p>\n</li>\n<li>\n<p>조회 시 캐시에는 다음과 같이 저장될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> QnALikeDislike \n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">=</span> :<span class=\"token keyword\">status</span><span class=\"token punctuation\">,</span> isDeleted <span class=\"token operator\">=</span> :isDeleted\n<span class=\"token keyword\">WHERE</span> id<span class=\"token punctuation\">.</span>member <span class=\"token operator\">=</span> :member <span class=\"token operator\">AND</span> id<span class=\"token punctuation\">.</span>qna <span class=\"token operator\">=</span> :qna</code></pre></div>\n</li>\n</ul>\n<p>바인딩 변수를 사용하면 SQL Injection도 예방할 수 있다고 하는데, JPA는 내부적으로 PreparedStatement를 사용한다고 알고 있어서 이 부분에 대해서는 추가로 더 알아봐야 할 것 같다.</p>\n<h2 id=\"스크랩-로직-개선\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%9E%A9-%EB%A1%9C%EC%A7%81-%EA%B0%9C%EC%84%A0\" aria-label=\"스크랩 로직 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크랩 로직 개선</h2>\n<p>Q&#x26;A 스크랩도 비슷한 로직으로 작성하려고 했었다.</p>\n<p>기존에 내가 생각했던 방식은 아래와 같다.</p>\n<ol>\n<li><code class=\"language-text\">findById</code>로 스크랩 데이터를 찾는다.</li>\n<li>이미 있는 경우 스크랩 취소로 인식하고 <code class=\"language-text\">deleteById</code>를 수행한다.</li>\n<li>이미 데이터가 있는데 deleted된 경우 다시 복구시킨다.</li>\n<li>없으면 새로 만들어주어 스크랩을 성공시킨다.</li>\n</ol>\n<p>그러나 위와 같은 로직으로 작성하니 if 분기가 생기기도 하고, 복잡해지기도 해서 어떻게 개선할지 고민하다가, 예전에 회사에서 기존 백엔드 서버 리팩토링 프로젝트를 할 때 배웠던 <code class=\"language-text\">ON DUPLICATE KEY UPDATE</code>를 사용하기로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createQnAScrap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> qnaId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Long</span> memberId <span class=\"token operator\">=</span> <span class=\"token function\">getMemberId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    qnaScrapRepository<span class=\"token punctuation\">.</span><span class=\"token function\">createOrUpdateQnAScrap</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">,</span> qnaId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Modifying</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>\n    nativeQuery <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    value <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO qna_scrap (member_id, qna_id) \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"VALUES (:memberId, :qnaId) \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"ON DUPLICATE KEY UPDATE is_deleted = IF(is_deleted, 0, 1)\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">createOrUpdateQnAScrap</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> memberId<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qnaId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> qnaId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ON DUPLICATE KEY UPDATE</code>는 중복된 key값이 있는 경우 지정된 값으로 업데이트하고, 아니라면 <code class=\"language-text\">INSERT</code>하는 쿼리이다.</p>\n<p><a href=\"https://github.com/techeer-TIL-group/yu-heejin/blob/main/Database/on-duplicate-key-update.md\"></a></p>\n<p>위 쿼리를 사용하여 토글 방식을 더 간단하게 처리할 수 있었다. 😆</p>","excerpt":"추천/비추천 로직 개선 Q&A 추천/비추천 로직을 이전에는 아래와 같이 작성했다. 기존 추천/비추천 로직은 다음과 같다. qnaId, memberId를 이용해 추천/비추천 데이터를 findById로 받아온다. 만약 데이터가 있는 경우, 아래와 같이 데이터를 처리한다. (추천 로직 기준으로 설명한다.) ,  여부를 받아온다. 만약 상태가 추천이라면, 삭제가 안 된 경우 추천 취소로 인식하고 해당 데이터를 삭제한다. 상태가 추천인데 삭제된 경우 다시 복구 시킨다. (다시 추천) 상태가 비추천인 경우, 만약 해당 데이터가 삭제되었으면 복구 후 추천 상태로 변경한다. (B → G) 데이터가 없는 경우 새로 만들어준다. 하지만 생각해보니,, 데이터를 굉장히 비효율적으로 처리한다는 생각이 들었다. 🥲 일반적으로 쿼리를 두번 사용하는 것보다 한 번에 요청하는 것이 더 효율적인 것으로 알고 있다. 그래서 고민 끝에 쿼리를 아래와 같이 수정해 로직을 개선했다. 개선한 점은 다음과 같다. ,  여부…","frontmatter":{"date":"February 01, 2024","title":"Q&A 추천/비추천, Q&A 스크랩 - 바인딩 변수 사용, 쿼리문 및 로직 개선","categories":"Backend","author":"유희진","emoji":"☁️"},"fields":{"slug":"/b-improve-query/"}},"next":{"id":"c708287e-906e-5b9e-8d29-bb405931656b","html":"<h2 id=\"branch-type\" style=\"position:relative;\"><a href=\"#branch-type\" aria-label=\"branch type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Branch type</h2>\n<blockquote>\n<p>브랜치 전략은 간략한 Git flow 전략을 사용합니다.</p>\n</blockquote>\n<ul>\n<li>main (master) : 개발 서버 배포를 위한 브랜치</li>\n<li>#{issue number}/name : 기능 구현을 위한 브랜치</li>\n</ul>\n<h2 id=\"branch-naming\" style=\"position:relative;\"><a href=\"#branch-naming\" aria-label=\"branch naming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Branch Naming</h2>\n<aside>\n💡 #{issue number}/{name}\n</aside>\n<ul>\n<li>브랜치명은 반드시 <strong>소문자로만 작성</strong>해주시고, <strong>케밥 케이스로 작성</strong>합니다.</li>\n<li>name은 스프린트를 영어로 요약하여 작성해주세요.</li>\n</ul>","frontmatter":{"date":"December 26, 2023","title":"Backend Branch Convention","categories":"Backend Convention","author":"유희진","emoji":"📝"},"fields":{"slug":"/b-branch-convention/"}},"prev":{"id":"de8558dc-499a-5a84-9650-37b9ed8a4be8","html":"<p>본 포스팅에서는 프로젝트에서 구현한  사용자 인증 및 인가 구현 과정을 살펴보고자 합니다.<br>\n이를 통해 회원가입, 로그인, 로그아웃 기능을 구현하였습니다.\n<br>\n<br>\n<br></p>\n<h2 id=\"spring-security-동작-방식\" style=\"position:relative;\"><a href=\"#spring-security-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D\" aria-label=\"spring security 동작 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Security 동작 방식</h2>\n<p>스프링 시큐리티는 애플리케이션에서 인증/인가에 대한 설정을 편리하게 할 수 있도록 도와줍니다.</p>\n<img width=\"743\" alt=\"스크린샷 2024-02-01 오후 8 11 42\" src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/7d97921b-ff4f-41f9-91a5-07095bde181d\">\n<p>위 사진은 일반적인 Spring 서버에서 요청을 처리하는 구조를 나타내는 그림입니다.<br>\n서블릿 컨테이너 안에는 서블릿에 도달하기 전에 요청을 순차적으로 처리하는 필터들의 집합인, FilterChain 이라는 것이 있습니다.</p>\n<h4 id=\"filterchain서블릿-컨테이너\" style=\"position:relative;\"><a href=\"#filterchain%EC%84%9C%EB%B8%94%EB%A6%BF-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" aria-label=\"filterchain서블릿 컨테이너 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FilterChain(서블릿 컨테이너)</h4>\n<ul>\n<li>클라이언트로부터 들어오는 모든 HTTP 요청은 일단 Servlet Container(톰캣)에 의해 처리됩니다.</li>\n<li>FilterChain은 순서대로 요청을 필터링하고 마지막 필터가 처리를 완료하면, 요청은 DispatcherServlet으로 전달됩니다.</li>\n</ul>\n<h4 id=\"delegatingfilterproxy\" style=\"position:relative;\"><a href=\"#delegatingfilterproxy\" aria-label=\"delegatingfilterproxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DelegatingFilterProxy</h4>\n<ul>\n<li>Spring의 ApplicationContext에서 FilterChainProxy를 찾고, 모든 보안 관련 작업을 위임합니다.</li>\n<li>DelegatingFilterProxy를 통해 Spring이 관리하는 보안 설정을 서블릿 필터로 통합할 수 있습니다.</li>\n</ul>\n<h4 id=\"filterchainproxy스프링-시큐리티\" style=\"position:relative;\"><a href=\"#filterchainproxy%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0\" aria-label=\"filterchainproxy스프링 시큐리티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FilterChainProxy(스프링 시큐리티)</h4>\n<ul>\n<li>시큐리티가 제공하는 요소로, 보안 필터들의 집합이라고 할 수 있습니다.</li>\n<li>DelegatingFilterChainProxy 를 통해 전달받은 요청을 FilterChainProxy에 의해 처리되고 이 과정에서 인증(Authentication), 인가(Authorization) 검사를 수행합니다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"인증인가\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D%EC%9D%B8%EA%B0%80\" aria-label=\"인증인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증/인가</h2>\n<p>클라이언트 요청에 대해 인증/인가는 Spring-Security의 Filter 에서 수행합니다.<br>\nSpring-Security를 통해서 \b다음과 같은 필터들을 만들고 이를 ServletFilterChain 에 포함시켰습니다.</p>\n<ul>\n<li>JwtAuthenticationFilter</li>\n<li>JwtAuthorizationFilter</li>\n</ul>\n<br> \n스프링 시큐리티는 SecurityFilterChain 클래스를 Bean 으로 등록만 시켜준다면 하면 알아서  \nDelegatingFilterProxy 에 ServletFilterChain 에 포함시켜줍니다.\n<br>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/33bccd66-5aac-4ab9-910d-59387ae713f5\" alt=\"인증흐름요약\"></p>\n<p>인증 흐름을 정리하자면 다음과 같습니다.</p>\n<ul>\n<li>사용자가 id, password를 입력해 로그인을 진행한다 -> 인증 시도</li>\n<li>AuthenticationFilter 에서 Username~Token 인증 객체를 만들어, AuthenticationManager에게 준다. (토큰 이름이 무척 길다)</li>\n<li>AuthenticationManager는 다시 AuthenticationProvider 에게 인증을 위임하고,  AuthenticationProvider는 UserDetailsService의 loadUserByUsername() 메서드를 통해 UserDetails 객체를 반환받는다.</li>\n<li>인증 성공 시(id,pw가 일치했다면), AuthenticationFilter는 successfulAuthentication()을 호출해 SecurityContext에 위의 이름 긴 UsernamePasswordAuthenticationToken 객체를 담는다.</li>\n<li>인증이 실패할 경우 unsuccessfulAuthentication() 호출, exceptionHandler를 실행한다.</li>\n</ul>\n<br>\n<p>커스텀하게 정의한 클래스는 다음과 같습니다.</p>\n<ol>\n<li>CustomMemberDetails (UserDetails)</li>\n<li>CustomMemberDetailsService (UserDetailsService)</li>\n<li>JwtAuthenticationProvider (AuthenticationProvider)</li>\n<li>JwtAuthenticationFilter (AuthenticationFilter)</li>\n<li>JwtAuthorizationFilter (AuthorizationFilter)</li>\n<li>CustomLogoutHandler (LogoutSuccessHandler)</li>\n</ol>\n<br>\n<p>또한 SecurityConfig 클래스를 정의해, Spring-Security의 설정을 구성했습니다.</p>\n<p>서블릿 필터의 체인의 일부로 등록되어 시큐리티의 FilterChainProxy에 영향을 미치도록 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableWebSecurity</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SecurityFilterChain</span> <span class=\"token function\">securityFilterChain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n        \t중간 생략\n        */</span>\n        \n        http\n            <span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">logoutUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/logout\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">logoutSuccessHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomLogoutHandler</span><span class=\"token punctuation\">(</span>refreshTokenRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        http\n            <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token function\">securityConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USER_ROLE_PERMIT_PATHS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SecurityConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USER_ROLE</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">denyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>jwtAuthenticationFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterAfter</span><span class=\"token punctuation\">(</span>jwtAuthorizationFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JwtAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>securityFilterChain() 메서드에서 HttpSecurity 객체를 통해 여러 보안 설정을 해주었습니다.</p>\n<p>이 메서드 내에서 정의된 설정에 따라 FilterChainProxy에 필터가 추가해주었습니다.</p>\n<ul>\n<li>JwtAuthenticationFilter는 사용자의 JWT 토큰을 검증해 인증 과정을 처리합니다.</li>\n<li>JWTAuthorizationFilter는 사용자가 요청한 자원에 대한 접근 권한을 확인하는 역할을 합니다.</li>\n</ul>\n<p><br> <br></p>\n<h3 id=\"jwtauthenticationfilter\" style=\"position:relative;\"><a href=\"#jwtauthenticationfilter\" aria-label=\"jwtauthenticationfilter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JwtAuthenticationFilter</h3>\n<ul>\n<li>UsernamePasswordAuthenticationFilter를 확장하여 JWT 기반의 인증 로직을 구현한 커스텀 필터입니다.</li>\n<li>로그인 요청 처리와 인증 성공 처리, 인증 실패 처리를 담당합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">JwtAuthenticationFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RefreshTokenRepository</span> refreshTokenRepository<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MemberSkillRepository</span> memberSkillRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refreshTokenRepository <span class=\"token operator\">=</span> refreshTokenRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberSkillRepository <span class=\"token operator\">=</span> memberSkillRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setFilterProcessesUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>/api/login 호출 시 실행되도록 설정했습니다.</p>\n<br>\n<h3 id=\"로그인-요청-처리\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9A%94%EC%B2%AD-%EC%B2%98%EB%A6%AC\" aria-label=\"로그인 요청 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 요청 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">attemptAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">WrongLoginException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token comment\">// form으로 넘어온 값으로 member 객체를 생성</span>\n\t    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t    <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> userToken <span class=\"token operator\">=</span>\n\t\t    <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setDetails</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> userToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t    <span class=\"token comment\">// AuthenticationManager 에 인증을 위임한다.</span>\n\t    <span class=\"token keyword\">return</span> <span class=\"token function\">getAuthenticationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>userToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationServiceException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아이디와 비밀번호를 올바르게 입력해주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사용자의 로그인 요청을 처리하는 메서드입니다.<br>\n사용자가 입력한  id, pw를 담아 UsernamePasswordAuthentication 객체를 생성합니다.</p>\n<p>생성된 인증 토큰은 AuthenticationManager 에게 전달되어 넘깁니다.</p>\n<br> \n<h3 id=\"인증-성공-처리\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EC%84%B1%EA%B3%B5-%EC%B2%98%EB%A6%AC\" aria-label=\"인증 성공 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 성공 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">successfulAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">,</span>\n\t\t\t\t    <span class=\"token class-name\">Authentication</span> authResult<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 1. 로그인 성공된 유저 조회</span>\n\t<span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomMemberDetails</span><span class=\"token punctuation\">)</span> authResult<span class=\"token punctuation\">.</span><span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 2. Refresh Token DB 저장 (해당 유저의 리프레시 토큰이 이미 존재한다면, 삭제 후 저장)</span>\n\t<span class=\"token class-name\">String</span> refreshToken <span class=\"token operator\">=</span> <span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">createRefreshToken</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Long</span> refreshTokenId <span class=\"token operator\">=</span> <span class=\"token function\">saveRefreshToken</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">,</span> refreshToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 3. AccessToken 발급</span>\n\t<span class=\"token class-name\">String</span> accessToken <span class=\"token operator\">=</span> <span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">createAccessToken</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">,</span> refreshTokenId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token class-name\">LoginResponse</span> loginResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginResponse</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token class-name\">ResponseUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">createResponseBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> loginResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>인증 성공 시 호출되는 메서드로, 인증된 사용자 정보를 가지고 리프레시 토큰을 생성, DB에 저장합니다.<br>\n엑세스 토큰을 생성하고 클라이언트에게 로그인 성공(200) 응답과 함께 엑세스 토큰을 반환합니다.</p>\n<br> \n<h3 id=\"인증-실패-처리\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EC%8B%A4%ED%8C%A8-%EC%B2%98%EB%A6%AC\" aria-label=\"인증 실패 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 실패 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unsuccessfulAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthenticationException</span> failed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">BaseErrorResponse</span> errorResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BaseErrorResponse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email, password 가 일치하지 않습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">ResponseUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">createResponseBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> errorResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BAD_REQUEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>인증이 실패했을 때 호출되는 메서드로, 인증 실패에 대한 오류를 응답으로 반환합니다.\n<br> <br></p>\n<h3 id=\"jwtauthenticationprovider\" style=\"position:relative;\"><a href=\"#jwtauthenticationprovider\" aria-label=\"jwtauthenticationprovider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JwtAuthenticationProvider</h3>\n<p>AuthenticationProvider 를 커스텀하게 구현한 클래스입니다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtAuthenticationProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticationProvider</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">CustomMemberDetailsService</span> customMemberDetailsService<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BCryptPasswordEncoder</span> passwordEncoder<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">)</span> authentication<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">CustomMemberDetails</span> savedMember <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomMemberDetails</span><span class=\"token punctuation\">)</span> customMemberDetailsService<span class=\"token punctuation\">.</span><span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>passwordEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadCredentialsException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"로그인 정보가 올바르지 않습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>savedMember<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> authentication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AuthenticationFilter -> AuthenticationManager -> AuthenticationProvider로 인증 로직을 위임합니다.</p>\n<h4 id=\"authenticate\" style=\"position:relative;\"><a href=\"#authenticate\" aria-label=\"authenticate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>authenticate()</h4>\n<ul>\n<li>인증 메서드로 실제 인증 과정을 처리합니다. A.T(엑세스토큰)을 매개변수로 받아 사용자가 제공한 email, pw를 추출합니다.</li>\n<li>CustomMemberDetails 객체를 데이터베이스에서 가져옵니다. (사용자 상세 정보)</li>\n<li>비밀번호가 맞는지 확인합니다. 일치하면 새로운 권한과 함께 새로운 UsernamePasswordAuthenticationToken 객체를 생성하고 반환합니다.</li>\n</ul>\n<hr>\n<br>\nSecurity 에서 다루는 유저 정보(UserDetails)와 실제 Domain Entity 사이에 차이가 있기 때문에,  \nUserDetails 를 구현한 클래스를 다음과 같이 정의해줍니다.  \n<h3 id=\"custommemberdetails\" style=\"position:relative;\"><a href=\"#custommemberdetails\" aria-label=\"custommemberdetails permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CustomMemberDetails</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomMemberDetails</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CustomMemberDetails</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>member <span class=\"token operator\">=</span> member<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> authorities <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Role</span> role <span class=\"token operator\">=</span> member<span class=\"token punctuation\">.</span><span class=\"token function\">getRoles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        authorities<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleGrantedAuthority</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> authorities<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"custommemberdeatilsservice\" style=\"position:relative;\"><a href=\"#custommemberdeatilsservice\" aria-label=\"custommemberdeatilsservice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CustomMemberDeatilsService</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomMemberDetailsService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetailsService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UsernameNotFoundException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByEmailAndProvider</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomMemberDetails</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernameNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사용자를 찾을 수 없습니다. 이메일: \"</span> <span class=\"token operator\">+</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Member의 provider 필드는 소셜로그인 시에 같이 쓰이는 값입니다. (“naver”, “google”…)</p>\n<p>이메일은 겹칠 수 있기 때문에 user.findByEmail()은 쓰면 안 됩니다. Provider 값도 함께 확인하는 작업이 필수!</p>\n<p>loadUserByUsername()으로 UserDetails 객체를 반환합니다. (여기서는 CustomMemberDetails)<br>\n<br> <br></p>\n<h3 id=\"jwtauthorizationfilter\" style=\"position:relative;\"><a href=\"#jwtauthorizationfilter\" aria-label=\"jwtauthorizationfilter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JwtAuthorizationFilter</h3>\n<p>시큐리티의 BasicAuthenticationFilter를 상속받아 특정 요청에 대해 JWT 기반의 인증 및 인가를 수행하는 필터입니다.\n(너무 길어서 코드는 뺐습니다..!)</p>\n<h4 id=\"기능\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5\" aria-label=\"기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기능</h4>\n<ul>\n<li>예외 URL 확인 : 특정 URL 패턴을 인증 과정에서 제외합니다.</li>\n<li>엑세스 토큰 확인 : 요청 헤더(Authorization) 에서 엑세스 토큰을 추출합니다.</li>\n<li>추출한 엑세스 토큰의 유효성을 검사합니다. 만료되었거나 잘못된 형식인 경우에는 오류를 발생시킵니다.</li>\n<li>엑세스 토큰이 만료되었을 경우 JWT 클레임에서 refresh_token ID를 추출해 해당 멤버의 리프레시 토큰의 유효성을 확인합니다. 유효한 경우 엑세스토큰을 재발급하며 리프레시 토큰 역시 만료된 경우 재인증을 요구합니다.</li>\n<li>사용자 인증 정보를 SecurityContextHolder에 저장합니다.</li>\n</ul>\n<p>엑세스 토큰의 유효성을 검사하고 만료된 경우, 엑세스 토큰을 재발급합니다.<br>\n<br>\n<br></p>\n<h3 id=\"느낀-점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀 점</h3>\n<p>스프링 시큐리티의 동작 원리를 배워 실제로 적용해 보았습니다.<br>\n그동안 개발 과정에서 보안을 등한시 했던 게 아닌지 반성하였고, 시프링 시큐리티를 통해 필터에서 보안 관련 처리를 하여 인증/인가 과정을 대략적으로 알 수 있었습니다.</p>\n<p>AuthorizationFilter 에서 JWT 관련 처리를 모두 담당하고 있는데 코드가 길고, 지저분해 추후에 리팩토링 할 예정입니다.<br>\n또한 리프레시 토큰을 DB에 저장해두는데, 더 효과적인 방법은 없는지 고민하고 있습니다</p>","frontmatter":{"date":"February 01, 2024","title":"Spring Security를 이용한 인증/인가 구현","categories":"Backend","author":"하정수","emoji":"✏️"},"fields":{"slug":"/b-login/"}},"site":{"siteMetadata":{"siteUrl":"https://flow-team-project.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/b-improve-query/","nextSlug":"/b-branch-convention/","prevSlug":"/b-login/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}