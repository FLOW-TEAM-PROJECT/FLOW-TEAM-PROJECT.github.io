{"componentChunkName":"component---src-templates-blog-template-js","path":"/b-login-jwt/","result":{"data":{"cur":{"id":"94cd5b2a-57eb-54b5-b395-ea998a002ac7","html":"<p>본 포스팅에서는 프로젝트에서 채택한 JWT 를 통한 토큰 교환 방식에 대한 생각을 적어보려고 합니다.</p>\n<p>설명하기 앞서, 간단히 JWT에 대해 알아보겠습니다.\n<br> <br></p>\n<h3 id=\"jwt-란\" style=\"position:relative;\"><a href=\"#jwt-%EB%9E%80\" aria-label=\"jwt 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 란?</h3>\n<ul>\n<li>\n<p>header</p>\n<ul>\n<li>typ : JWT (토큰의 종류를 지정. 이 경우 JWT로 고정)</li>\n<li>alg : 암호화 알고리즘</li>\n</ul>\n</li>\n<li>\n<p>payload</p>\n<ul>\n<li>토큰에서 사용할 정보들의 조각인, Claim 이 담겨 있다.</li>\n<li>클레임은 JSON(Key, Value)의 형태로, 다수의 정보를 넣을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>Signature (서명)</p>\n<ul>\n<li>\n<p>서명은 토큰의 유효성 검증을 할 때 사용되는 곳으로, 무결성을 보장한다.</p>\n</li>\n<li>\n<p>헤더 + 페이로드를 BASE64로 인코딩 한 값을 지정된 비밀 키를 이용해 헤더에 적혀있는 alg 으로 암호화한다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>서명은 데이터를 암호화 하는 것은 아니고, 토큰의 데이터가 변조 되지 않았다는 것을 보장합니다. -> 무결성</p>\n<p>해커가 페이로드의 값을 조금이라도 바꾼다면 해시 알고리즘에 의해 Signature는 바뀔 것이고, 서버에서 해당 값을 비교해 데이터가 변조되었는지, 아닌지를 알 수 있습니다.</p>\n<p><br> <br></p>\n<h3 id=\"jwt-생성-방식\" style=\"position:relative;\"><a href=\"#jwt-%EC%83%9D%EC%84%B1-%EB%B0%A9%EC%8B%9D\" aria-label=\"jwt 생성 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 생성 방식</h3>\n<p>다음은 프로젝트에서 엑세스 토큰을 생성하는 JwtUtil 클래스의 일부입니다.</p>\n<img width=\"790\" alt=\"스크린샷 2024-02-02 오전 8 36 07\" src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/89bfe82d-dae1-4720-9ed5-e3601090c5af\">\n<img width=\"695\" alt=\"스크린샷 2024-02-02 오전 8 36 27\" src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/cfba84b7-30bb-4a16-adf4-31f3a271758c\">\n<img width=\"788\" alt=\"스크린샷 2024-02-02 오전 8 37 17\" src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/51fc1ae8-79fb-43d3-a912-eea89883f743\">\n<p>Secret-Key는 서버에서만 보관하여, 대칭키 암호화 방식을 통해 서명을 생성합니다.</p>\n<p>엑세스 토큰의 Claim에는 멤버 email, provider, refreshTokenId를 넣었습니다.</p>\n<p>리프레시 토큰을 생성하는 방식도 크게 다르지 않습니다.<br>\n<img width=\"790\" alt=\"스크린샷 2024-02-02 오전 8 38 15\" src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/2e56a933-541e-41ab-b9eb-d609a9005154\"></p>\n<p>리프레시 토큰의 claim 에는 memberEmail 만을 넣었습니다.</p>\n<p>현재 토큰 교환 로직은 다음과 같습니다.</p>\n<p>인증에 성공하면 Access Token, Refresh Token을 발급한다.\nDB 에 Refresh Token을 저장해두고, Access Token만을 클라이언트에게 제공한다.\n엑세스 토큰이 만료된 경우, 토큰의 클레임에 들어있는 refreshTokenId 값으로 DB에서 refresh token을 조회합니다.</p>\n<p>해당 id를 가지는 refresh token이 여전히 유효하다면 access token을 재발급하고, 유효하지 않다면 403 에러를 반환합니다.</p>\n<p>리프레시 토큰이 엑세스 토큰 발급하는 역할을 하는 것입니다.</p>\n<p><br> <br></p>\n<h4 id=\"그렇다면-왜-엑세스-토큰만을-제공하고-리프레시-토큰은-db에만-저장하는지\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%99%9C-%EC%97%91%EC%84%B8%EC%8A%A4-%ED%86%A0%ED%81%B0%EB%A7%8C%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B3%A0-%EB%A6%AC%ED%94%84%EB%A0%88%EC%8B%9C-%ED%86%A0%ED%81%B0%EC%9D%80-db%EC%97%90%EB%A7%8C-%EC%A0%80%EC%9E%A5%ED%95%98%EB%8A%94%EC%A7%80\" aria-label=\"그렇다면 왜 엑세스 토큰만을 제공하고 리프레시 토큰은 db에만 저장하는지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 왜 엑세스 토큰만을 제공하고, 리프레시 토큰은 DB에만 저장하는지?</h4>\n<p>JWT로 발급한 엑세스 토큰에는 민감 정보를 담지 말라는 것이 원칙입니다. 이는 해커가 토큰을 탈취해 사용할 수 있기 때문이죠.</p>\n<p>따라서 엑세스 토큰이 탈취되면 사실 손 쓸 방법은 없습니다. 제한시간을 짧게 두어 피해를 줄이는 것이 최선이라고 합니다.</p>\n<p>JWT 방식은 XSS, CSRF 등과 같은 요청을 강제로 발생시키는 공격에 여전히 취약하기도 하며, 따라서 보안을 위해서 이와 같은 방식을 선택했습니다.</p>\n<br>  \n보안 공격과 관련된 간단한 사례를 들어보겠습니다.\n<br> \n<p>CSRF</p>\n<p>사용자 브라우저에 AAA.com 의 인증 정보인, 엑세스 토큰이 쿠키로 저장되어 있습니다.</p>\n<p>이 때 BBB.com 이라는 악성 웹사이트가 img 태그나 하이퍼링크를 통해 서버에 DELETE /userInfo 와 같은 요청을 한다면, 이 요청은 브라우저의 인증 쿠키가 포함된 채로 서버로 전송되고, 서버는 이를 정상적인 요청으로 간주하여 사용자 정보를 삭제해버립니다.</p>\n<br> \nXSS\n<p>AAA.com의 게시판에 해커가 브라우저의 쿠키를 참조하여 자동으로 서버에 요청을 보내는 script 태그를 심어놓았습니다. 웹 페이지가 렌더링 되자마자 해당 코드가 작동해 클라이언트 모르게 서버로 요청이 전송됩니다.</p>\n<br> \n<p>사실 요즘은 위 두 가지 경우는 대부분의 사이트에서 방어가 되어 있긴 합니다.</p>\n<p>CSRF의 경우 referrer 검사, csrf 토큰 검증, double submit 쿠키 검증과 같은 방식으로 방어할 수 있습니다.</p>\n<p>XSS의 경우에는 클라이언트 차원에서 태그 입력 방지(이스케이프 문자열) 같은 방법으로 충분히 대응할 수 있습니다.</p>\n<p>하지만 위와 같은 방식이 100% 방어한다는 보장이 없기 때문에, 해당 공격에 노출되었다는 가정하에 위조된 요청을 어떻게 방어할지에 대한 고민도 필요하다는 생각이 들었습니다.</p>\n<p><br> <br></p>\n<h3 id=\"토큰-교환-전략\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0-%EA%B5%90%ED%99%98-%EC%A0%84%EB%9E%B5\" aria-label=\"토큰 교환 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰 교환 전략</h3>\n<br> \n1. Refresh Token은 쿠키에, Access Token은 Response Body로 전달한다.\n<br> \n<p>HttpOnly 쿠키를 활용해 JavaScript 코드가 침투하는 것을 막을 수 있습니다.</p>\n<p>리프레시 토큰을 HTTPOnly 쿠키로 전달한다면, Client-Side JavaScript 가 이 쿠키에 접근할 수 없습니다. 이렇게 하면 XSS 공격을 방지할 수 있습니다. 클라이언트 단에서 로컬 혹은 세션 storage에 값을 저장할 일도 없어, 더 안전하다고 볼 수 있습니다.</p>\n<br> \n<p>이러한 이유들로 인해 어플리케이션에서 Refresh Token을 쿠키에 넣는 경우가 많다고 합니다.</p>\n<p>따라서 이 방식은 서버에서 refresh token을 따로 저장하지 않고도, 토큰의 유효성 검사를 쉽게 할 수 있게 됩니다.</p>\n<br> \n<p>단점으로는 쿠키는 크로스 도메인 제한이 있기 때문에 관리가 복잡해질 수 있고, 쿠키의 크기가 아주 큰 경우에는 네트워크 트래픽 낭비를 야기할 수도 있습니다.</p>\n<p><br> <br>\n2. Refresh Token은 DB에 저장, Access Token만 Response Body 에 전달한다.</p>\n<br> \n<p>이것이 저희 프로젝트에서 채택한 방법입니다.</p>\n<p>리프레시 토큰을 DB단에 저장하고 클라이언트는 Bearer 방식으로 엑세스 토큰을 전달해줍니다.</p>\n<br>  \n<p>엑세스 토큰의 유효기간이 만료되면 Refresh Token 이 유효하다면, 엑세스 토큰을 재발급해줍니다. 클라이언트는 refresh token을 가지고 있지 않습니다.</p>\n<p>하지만 개발 후에, 해당 방식이 바람직한지에 대한 의문이 들었습니다.</p>\n<br>  \n<p>프론트는 엑세스 토큰만 가지고 만료된 엑토큰으로 서버에 접근시, 서버 DB에서 저장된 리프레시 토큰으로 엑세스 토큰을 재발급한다.</p>\n<p>-> ????</p>\n<p>리프레시 토큰을 서버에만 저장하고 프론트에는 주지 않는다면, 그건 엑세스 토큰을 발급해주는 자판기에 불과하다는 생각이 들었습니다.</p>\n<br> \n<p>따라서 이 방식은 적절하지 않다고 생각이 바뀌었습니다.</p>\n<p>한 번 엑세스 토큰이 탈취되면, 해커가 계속해서 엑세스 토큰을 재발급 받을 수 있으니까요. 이는 큰 문제입니다.</p>\n<br> \n<p>따라서 두 토큰 모두 클라이언트에게 발급해 주고, 클라이언트가 유효한 Access Token, Refresh Token을 서버에 제시해야 한다는 생각이 들었습니다.</p>\n<p>프론트에서 리프레시 토큰을 제시해주어야 내가 누구인지, 권한이 있는지를 증명할 수 있을 것입니다.</p>\n<p><br> <br></p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<br> \n따라서 1번 + 2번 방식을 모두 채택하는 것이 더 나은 방법이라고 생각합니다.  \n<br> <br> \nRefreshToken은 쿠키에, AccessToken은 응답으로 제공하고 거기에 DB에 리프레시 토큰을 저장해서 유효성 검사를 하는 것입니다.  \n<p>DB에 리프레시 토큰을 저장하면 문제 발생 시 DB에 있는 리프레시 토큰을 지워서 대처하는 등 서버쪽에서 능동적으로 대처할 수 있는 일이 많을 것이라 생각합니다.</p>\n<br> \n<p>또한 Refresh Token이 사용될 때마다 새로운 access token과 함께 refresh token을 발급하여 이전에 발급된 토큰들을 사용 불가능하게 바꾸는 방법을 추가해도 좋을 것 같습니다. RTR(Refresh Token Rotation)</p>\n <br> \n<p>사실상 완벽한 보안은 없습니다. 인증 방식에는 서로 장단점이 존재하며 상황에 맞게 사용해야 될 것 같다는 것을 느꼈습니다.</p>\n<p>브라우저와 서버 모두 보안에 신경쓰고 대비를 하는 것이 최선일 것 같습니다.</p>\n<p>토큰 교환 전략은 팀원분들과 충분한 회의를 거친 후, 그대로 갈 지 바꿀 지 정할 생각입니다.</p>","excerpt":"본 포스팅에서는 프로젝트에서 채택한 JWT 를 통한 토큰 교환 방식에 대한 생각을 적어보려고 합니다. 설명하기 앞서, 간단히 JWT에 대해 알아보겠습니다.\n  JWT 란? header typ : JWT (토큰의 종류를 지정. 이 경우 JWT로 고정) alg : 암호화 알고리즘 payload 토큰에서 사용할 정보들의 조각인, Claim 이 담겨 있다. 클레임은 JSON(Key, Value)의 형태로, 다수의 정보를 넣을 수 있다. Signature (서명) 서명은 토큰의 유효성 검증을 할 때 사용되는 곳으로, 무결성을 보장한다. 헤더 + 페이로드를 BASE64로 인코딩 한 값을 지정된 비밀 키를 이용해 헤더에 적혀있는 alg 으로 암호화한다. 서명은 데이터를 암호화 하는 것은 아니고, 토큰의 데이터가 변조 되지 않았다는 것을 보장합니다. -> 무결성 해커가 페이로드의 값을 조금이라도 바꾼다면 해시 알고리즘에 의해 Signature는 바뀔 것이고, 서버에서 해당 값을 비교해 데이터가 …","frontmatter":{"date":"February 02, 2024","title":"(JWT) Access Token 과 Refresh Token 저장 및 관리에 대한 고민","categories":"Backend","author":"하정수","emoji":"🍪"},"fields":{"slug":"/b-login-jwt/"}},"next":{"id":"de8558dc-499a-5a84-9650-37b9ed8a4be8","html":"<p>본 포스팅에서는 프로젝트에서 구현한  사용자 인증 및 인가 구현 과정을 살펴보고자 합니다.<br>\n이를 통해 회원가입, 로그인, 로그아웃 기능을 구현하였습니다.\n<br>\n<br>\n<br></p>\n<h2 id=\"spring-security-동작-방식\" style=\"position:relative;\"><a href=\"#spring-security-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D\" aria-label=\"spring security 동작 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Security 동작 방식</h2>\n<p>스프링 시큐리티는 애플리케이션에서 인증/인가에 대한 설정을 편리하게 할 수 있도록 도와줍니다.</p>\n<img width=\"743\" alt=\"스크린샷 2024-02-01 오후 8 11 42\" src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/7d97921b-ff4f-41f9-91a5-07095bde181d\">\n<p>위 사진은 일반적인 Spring 서버에서 요청을 처리하는 구조를 나타내는 그림입니다.<br>\n서블릿 컨테이너 안에는 서블릿에 도달하기 전에 요청을 순차적으로 처리하는 필터들의 집합인, FilterChain 이라는 것이 있습니다.</p>\n<h4 id=\"filterchain서블릿-컨테이너\" style=\"position:relative;\"><a href=\"#filterchain%EC%84%9C%EB%B8%94%EB%A6%BF-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" aria-label=\"filterchain서블릿 컨테이너 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FilterChain(서블릿 컨테이너)</h4>\n<ul>\n<li>클라이언트로부터 들어오는 모든 HTTP 요청은 일단 Servlet Container(톰캣)에 의해 처리됩니다.</li>\n<li>FilterChain은 순서대로 요청을 필터링하고 마지막 필터가 처리를 완료하면, 요청은 DispatcherServlet으로 전달됩니다.</li>\n</ul>\n<h4 id=\"delegatingfilterproxy\" style=\"position:relative;\"><a href=\"#delegatingfilterproxy\" aria-label=\"delegatingfilterproxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DelegatingFilterProxy</h4>\n<ul>\n<li>Spring의 ApplicationContext에서 FilterChainProxy를 찾고, 모든 보안 관련 작업을 위임합니다.</li>\n<li>DelegatingFilterProxy를 통해 Spring이 관리하는 보안 설정을 서블릿 필터로 통합할 수 있습니다.</li>\n</ul>\n<h4 id=\"filterchainproxy스프링-시큐리티\" style=\"position:relative;\"><a href=\"#filterchainproxy%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0\" aria-label=\"filterchainproxy스프링 시큐리티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FilterChainProxy(스프링 시큐리티)</h4>\n<ul>\n<li>시큐리티가 제공하는 요소로, 보안 필터들의 집합이라고 할 수 있습니다.</li>\n<li>DelegatingFilterChainProxy 를 통해 전달받은 요청을 FilterChainProxy에 의해 처리되고 이 과정에서 인증(Authentication), 인가(Authorization) 검사를 수행합니다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"인증인가\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D%EC%9D%B8%EA%B0%80\" aria-label=\"인증인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증/인가</h2>\n<p>클라이언트 요청에 대해 인증/인가는 Spring-Security의 Filter 에서 수행합니다.<br>\nSpring-Security를 통해서 \b다음과 같은 필터들을 만들고 이를 ServletFilterChain 에 포함시켰습니다.</p>\n<ul>\n<li>JwtAuthenticationFilter</li>\n<li>JwtAuthorizationFilter</li>\n</ul>\n<br> \n스프링 시큐리티는 SecurityFilterChain 클래스를 Bean 으로 등록만 시켜준다면 하면 알아서  \nDelegatingFilterProxy 에 ServletFilterChain 에 포함시켜줍니다.\n<br>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/33bccd66-5aac-4ab9-910d-59387ae713f5\" alt=\"인증흐름요약\"></p>\n<p>인증 흐름을 정리하자면 다음과 같습니다.</p>\n<ul>\n<li>사용자가 id, password를 입력해 로그인을 진행한다 -> 인증 시도</li>\n<li>AuthenticationFilter 에서 Username~Token 인증 객체를 만들어, AuthenticationManager에게 준다. (토큰 이름이 무척 길다)</li>\n<li>AuthenticationManager는 다시 AuthenticationProvider 에게 인증을 위임하고,  AuthenticationProvider는 UserDetailsService의 loadUserByUsername() 메서드를 통해 UserDetails 객체를 반환받는다.</li>\n<li>인증 성공 시(id,pw가 일치했다면), AuthenticationFilter는 successfulAuthentication()을 호출해 SecurityContext에 위의 이름 긴 UsernamePasswordAuthenticationToken 객체를 담는다.</li>\n<li>인증이 실패할 경우 unsuccessfulAuthentication() 호출, exceptionHandler를 실행한다.</li>\n</ul>\n<br>\n<p>커스텀하게 정의한 클래스는 다음과 같습니다.</p>\n<ol>\n<li>CustomMemberDetails (UserDetails)</li>\n<li>CustomMemberDetailsService (UserDetailsService)</li>\n<li>JwtAuthenticationProvider (AuthenticationProvider)</li>\n<li>JwtAuthenticationFilter (AuthenticationFilter)</li>\n<li>JwtAuthorizationFilter (AuthorizationFilter)</li>\n<li>CustomLogoutHandler (LogoutSuccessHandler)</li>\n</ol>\n<br>\n<p>또한 SecurityConfig 클래스를 정의해, Spring-Security의 설정을 구성했습니다.</p>\n<p>서블릿 필터의 체인의 일부로 등록되어 시큐리티의 FilterChainProxy에 영향을 미치도록 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableWebSecurity</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SecurityFilterChain</span> <span class=\"token function\">securityFilterChain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n        \t중간 생략\n        */</span>\n        \n        http\n            <span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">logoutUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/logout\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">logoutSuccessHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomLogoutHandler</span><span class=\"token punctuation\">(</span>refreshTokenRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        http\n            <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token function\">securityConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USER_ROLE_PERMIT_PATHS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SecurityConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USER_ROLE</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">denyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>jwtAuthenticationFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterAfter</span><span class=\"token punctuation\">(</span>jwtAuthorizationFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JwtAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>securityFilterChain() 메서드에서 HttpSecurity 객체를 통해 여러 보안 설정을 해주었습니다.</p>\n<p>이 메서드 내에서 정의된 설정에 따라 FilterChainProxy에 필터가 추가해주었습니다.</p>\n<ul>\n<li>JwtAuthenticationFilter는 사용자의 JWT 토큰을 검증해 인증 과정을 처리합니다.</li>\n<li>JWTAuthorizationFilter는 사용자가 요청한 자원에 대한 접근 권한을 확인하는 역할을 합니다.</li>\n</ul>\n<p><br> <br></p>\n<h3 id=\"jwtauthenticationfilter\" style=\"position:relative;\"><a href=\"#jwtauthenticationfilter\" aria-label=\"jwtauthenticationfilter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JwtAuthenticationFilter</h3>\n<ul>\n<li>UsernamePasswordAuthenticationFilter를 확장하여 JWT 기반의 인증 로직을 구현한 커스텀 필터입니다.</li>\n<li>로그인 요청 처리와 인증 성공 처리, 인증 실패 처리를 담당합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">JwtAuthenticationFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RefreshTokenRepository</span> refreshTokenRepository<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MemberSkillRepository</span> memberSkillRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refreshTokenRepository <span class=\"token operator\">=</span> refreshTokenRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberSkillRepository <span class=\"token operator\">=</span> memberSkillRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setFilterProcessesUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>/api/login 호출 시 실행되도록 설정했습니다.</p>\n<br>\n<h3 id=\"로그인-요청-처리\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9A%94%EC%B2%AD-%EC%B2%98%EB%A6%AC\" aria-label=\"로그인 요청 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 요청 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">attemptAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">WrongLoginException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token comment\">// form으로 넘어온 값으로 member 객체를 생성</span>\n\t    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t    <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> userToken <span class=\"token operator\">=</span>\n\t\t    <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setDetails</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> userToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t    <span class=\"token comment\">// AuthenticationManager 에 인증을 위임한다.</span>\n\t    <span class=\"token keyword\">return</span> <span class=\"token function\">getAuthenticationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>userToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationServiceException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아이디와 비밀번호를 올바르게 입력해주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사용자의 로그인 요청을 처리하는 메서드입니다.<br>\n사용자가 입력한  id, pw를 담아 UsernamePasswordAuthentication 객체를 생성합니다.</p>\n<p>생성된 인증 토큰은 AuthenticationManager 에게 전달되어 넘깁니다.</p>\n<br> \n<h3 id=\"인증-성공-처리\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EC%84%B1%EA%B3%B5-%EC%B2%98%EB%A6%AC\" aria-label=\"인증 성공 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 성공 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">successfulAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">,</span>\n\t\t\t\t    <span class=\"token class-name\">Authentication</span> authResult<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 1. 로그인 성공된 유저 조회</span>\n\t<span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomMemberDetails</span><span class=\"token punctuation\">)</span> authResult<span class=\"token punctuation\">.</span><span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 2. Refresh Token DB 저장 (해당 유저의 리프레시 토큰이 이미 존재한다면, 삭제 후 저장)</span>\n\t<span class=\"token class-name\">String</span> refreshToken <span class=\"token operator\">=</span> <span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">createRefreshToken</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Long</span> refreshTokenId <span class=\"token operator\">=</span> <span class=\"token function\">saveRefreshToken</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">,</span> refreshToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 3. AccessToken 발급</span>\n\t<span class=\"token class-name\">String</span> accessToken <span class=\"token operator\">=</span> <span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">createAccessToken</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">,</span> refreshTokenId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token class-name\">LoginResponse</span> loginResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginResponse</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token class-name\">ResponseUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">createResponseBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> loginResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>인증 성공 시 호출되는 메서드로, 인증된 사용자 정보를 가지고 리프레시 토큰을 생성, DB에 저장합니다.<br>\n엑세스 토큰을 생성하고 클라이언트에게 로그인 성공(200) 응답과 함께 엑세스 토큰을 반환합니다.</p>\n<br> \n<h3 id=\"인증-실패-처리\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EC%8B%A4%ED%8C%A8-%EC%B2%98%EB%A6%AC\" aria-label=\"인증 실패 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 실패 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unsuccessfulAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthenticationException</span> failed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">BaseErrorResponse</span> errorResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BaseErrorResponse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email, password 가 일치하지 않습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">ResponseUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">createResponseBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> errorResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BAD_REQUEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>인증이 실패했을 때 호출되는 메서드로, 인증 실패에 대한 오류를 응답으로 반환합니다.\n<br> <br></p>\n<h3 id=\"jwtauthenticationprovider\" style=\"position:relative;\"><a href=\"#jwtauthenticationprovider\" aria-label=\"jwtauthenticationprovider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JwtAuthenticationProvider</h3>\n<p>AuthenticationProvider 를 커스텀하게 구현한 클래스입니다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtAuthenticationProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticationProvider</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">CustomMemberDetailsService</span> customMemberDetailsService<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BCryptPasswordEncoder</span> passwordEncoder<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">)</span> authentication<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">CustomMemberDetails</span> savedMember <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomMemberDetails</span><span class=\"token punctuation\">)</span> customMemberDetailsService<span class=\"token punctuation\">.</span><span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>passwordEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadCredentialsException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"로그인 정보가 올바르지 않습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>savedMember<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> authentication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AuthenticationFilter -> AuthenticationManager -> AuthenticationProvider로 인증 로직을 위임합니다.</p>\n<h4 id=\"authenticate\" style=\"position:relative;\"><a href=\"#authenticate\" aria-label=\"authenticate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>authenticate()</h4>\n<ul>\n<li>인증 메서드로 실제 인증 과정을 처리합니다. A.T(엑세스토큰)을 매개변수로 받아 사용자가 제공한 email, pw를 추출합니다.</li>\n<li>CustomMemberDetails 객체를 데이터베이스에서 가져옵니다. (사용자 상세 정보)</li>\n<li>비밀번호가 맞는지 확인합니다. 일치하면 새로운 권한과 함께 새로운 UsernamePasswordAuthenticationToken 객체를 생성하고 반환합니다.</li>\n</ul>\n<hr>\n<br>\nSecurity 에서 다루는 유저 정보(UserDetails)와 실제 Domain Entity 사이에 차이가 있기 때문에,  \nUserDetails 를 구현한 클래스를 다음과 같이 정의해줍니다.  \n<h3 id=\"custommemberdetails\" style=\"position:relative;\"><a href=\"#custommemberdetails\" aria-label=\"custommemberdetails permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CustomMemberDetails</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomMemberDetails</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CustomMemberDetails</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>member <span class=\"token operator\">=</span> member<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> authorities <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Role</span> role <span class=\"token operator\">=</span> member<span class=\"token punctuation\">.</span><span class=\"token function\">getRoles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        authorities<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleGrantedAuthority</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> authorities<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"custommemberdeatilsservice\" style=\"position:relative;\"><a href=\"#custommemberdeatilsservice\" aria-label=\"custommemberdeatilsservice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CustomMemberDeatilsService</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomMemberDetailsService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetailsService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UsernameNotFoundException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByEmailAndProvider</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomMemberDetails</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernameNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사용자를 찾을 수 없습니다. 이메일: \"</span> <span class=\"token operator\">+</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Member의 provider 필드는 소셜로그인 시에 같이 쓰이는 값입니다. (“naver”, “google”…)</p>\n<p>이메일은 겹칠 수 있기 때문에 user.findByEmail()은 쓰면 안 됩니다. Provider 값도 함께 확인하는 작업이 필수!</p>\n<p>loadUserByUsername()으로 UserDetails 객체를 반환합니다. (여기서는 CustomMemberDetails)<br>\n<br> <br></p>\n<h3 id=\"jwtauthorizationfilter\" style=\"position:relative;\"><a href=\"#jwtauthorizationfilter\" aria-label=\"jwtauthorizationfilter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JwtAuthorizationFilter</h3>\n<p>시큐리티의 BasicAuthenticationFilter를 상속받아 특정 요청에 대해 JWT 기반의 인증 및 인가를 수행하는 필터입니다.\n(너무 길어서 코드는 뺐습니다..!)</p>\n<h4 id=\"기능\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5\" aria-label=\"기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기능</h4>\n<ul>\n<li>예외 URL 확인 : 특정 URL 패턴을 인증 과정에서 제외합니다.</li>\n<li>엑세스 토큰 확인 : 요청 헤더(Authorization) 에서 엑세스 토큰을 추출합니다.</li>\n<li>추출한 엑세스 토큰의 유효성을 검사합니다. 만료되었거나 잘못된 형식인 경우에는 오류를 발생시킵니다.</li>\n<li>엑세스 토큰이 만료되었을 경우 JWT 클레임에서 refresh_token ID를 추출해 해당 멤버의 리프레시 토큰의 유효성을 확인합니다. 유효한 경우 엑세스토큰을 재발급하며 리프레시 토큰 역시 만료된 경우 재인증을 요구합니다.</li>\n<li>사용자 인증 정보를 SecurityContextHolder에 저장합니다.</li>\n</ul>\n<p>엑세스 토큰의 유효성을 검사하고 만료된 경우, 엑세스 토큰을 재발급합니다.<br>\n<br>\n<br></p>\n<h3 id=\"느낀-점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀 점</h3>\n<p>스프링 시큐리티의 동작 원리를 배워 실제로 적용해 보았습니다.<br>\n그동안 개발 과정에서 보안을 등한시 했던 게 아닌지 반성하였고, 시프링 시큐리티를 통해 필터에서 보안 관련 처리를 하여 인증/인가 과정을 대략적으로 알 수 있었습니다.</p>\n<p>AuthorizationFilter 에서 JWT 관련 처리를 모두 담당하고 있는데 코드가 길고, 지저분해 추후에 리팩토링 할 예정입니다.<br>\n또한 리프레시 토큰을 DB에 저장해두는데, 더 효과적인 방법은 없는지 고민하고 있습니다</p>","frontmatter":{"date":"February 01, 2024","title":"Spring Security를 이용한 인증/인가 구현","categories":"Backend","author":"하정수","emoji":"✏️"},"fields":{"slug":"/b-login/"}},"prev":{"id":"0746462e-d9d8-5833-be64-1944790a67d9","html":"<p>본 포스팅에서는 프로젝트에서 채택한 JWT 를 통한 토큰 교환 방식에 대한 생각을 적어보려고 합니다.</p>\n<p>설명하기 앞서, 간단히 JWT에 대해 알아보겠습니다.\n<br> <br></p>\n<h3 id=\"jwt-란\" style=\"position:relative;\"><a href=\"#jwt-%EB%9E%80\" aria-label=\"jwt 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 란?</h3>\n<ul>\n<li>\n<p>header</p>\n<ul>\n<li>typ : JWT (토큰의 종류를 지정. 이 경우 JWT로 고정)</li>\n<li>alg : 암호화 알고리즘</li>\n</ul>\n</li>\n<li>\n<p>payload</p>\n<ul>\n<li>토큰에서 사용할 정보들의 조각인, Claim 이 담겨 있다.</li>\n<li>클레임은 JSON(Key, Value)의 형태로, 다수의 정보를 넣을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>Signature (서명)</p>\n<ul>\n<li>\n<p>서명은 토큰의 유효성 검증을 할 때 사용되는 곳으로, 무결성을 보장한다.</p>\n</li>\n<li>\n<p>헤더 + 페이로드를 BASE64로 인코딩 한 값을 지정된 비밀 키를 이용해 헤더에 적혀있는 alg 으로 암호화한다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>서명은 데이터를 암호화 하는 것은 아니고, 토큰의 데이터가 변조 되지 않았다는 것을 보장합니다. -> 무결성</p>\n<p>해커가 페이로드의 값을 조금이라도 바꾼다면 해시 알고리즘에 의해 Signature는 바뀔 것이고, 서버에서 해당 값을 비교해 데이터가 변조되었는지, 아닌지를 알 수 있습니다.</p>\n<p><br> <br></p>\n<h3 id=\"jwt-생성-방식\" style=\"position:relative;\"><a href=\"#jwt-%EC%83%9D%EC%84%B1-%EB%B0%A9%EC%8B%9D\" aria-label=\"jwt 생성 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 생성 방식</h3>\n<p>다음은 프로젝트에서 엑세스 토큰을 생성하는 JwtUtil 클래스의 일부입니다.</p>\n<img width=\"790\" alt=\"스크린샷 2024-02-02 오전 8 36 07\" src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/89bfe82d-dae1-4720-9ed5-e3601090c5af\">\n<img width=\"695\" alt=\"스크린샷 2024-02-02 오전 8 36 27\" src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/cfba84b7-30bb-4a16-adf4-31f3a271758c\">\n<img width=\"788\" alt=\"스크린샷 2024-02-02 오전 8 37 17\" src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/51fc1ae8-79fb-43d3-a912-eea89883f743\">\n<p>Secret-Key는 서버에서만 보관하여, 대칭키 암호화 방식을 통해 서명을 생성합니다.</p>\n<p>엑세스 토큰의 Claim에는 멤버 email, provider, refreshTokenId를 넣었습니다.</p>\n<p>리프레시 토큰을 생성하는 방식도 크게 다르지 않습니다.<br>\n<img width=\"790\" alt=\"스크린샷 2024-02-02 오전 8 38 15\" src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/56336436/2e56a933-541e-41ab-b9eb-d609a9005154\"></p>\n<p>리프레시 토큰의 claim 에는 memberEmail 만을 넣었습니다.</p>\n<p>현재 토큰 교환 로직은 다음과 같습니다.</p>\n<p>인증에 성공하면 Access Token, Refresh Token을 발급한다.\nDB 에 Refresh Token을 저장해두고, Access Token만을 클라이언트에게 제공한다.\n엑세스 토큰이 만료된 경우, 토큰의 클레임에 들어있는 refreshTokenId 값으로 DB에서 refresh token을 조회합니다.</p>\n<p>해당 id를 가지는 refresh token이 여전히 유효하다면 access token을 재발급하고, 유효하지 않다면 403 에러를 반환합니다.</p>\n<p>리프레시 토큰이 엑세스 토큰 발급하는 역할을 하는 것입니다.</p>\n<p><br> <br></p>\n<h4 id=\"그렇다면-왜-엑세스-토큰만을-제공하고-리프레시-토큰은-db에만-저장하는지\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%99%9C-%EC%97%91%EC%84%B8%EC%8A%A4-%ED%86%A0%ED%81%B0%EB%A7%8C%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B3%A0-%EB%A6%AC%ED%94%84%EB%A0%88%EC%8B%9C-%ED%86%A0%ED%81%B0%EC%9D%80-db%EC%97%90%EB%A7%8C-%EC%A0%80%EC%9E%A5%ED%95%98%EB%8A%94%EC%A7%80\" aria-label=\"그렇다면 왜 엑세스 토큰만을 제공하고 리프레시 토큰은 db에만 저장하는지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 왜 엑세스 토큰만을 제공하고, 리프레시 토큰은 DB에만 저장하는지?</h4>\n<p>JWT로 발급한 엑세스 토큰에는 민감 정보를 담지 말라는 것이 원칙입니다. 이는 해커가 토큰을 탈취해 사용할 수 있기 때문이죠.</p>\n<p>따라서 엑세스 토큰이 탈취되면 사실 손 쓸 방법은 없습니다. 제한시간을 짧게 두어 피해를 줄이는 것이 최선이라고 합니다.</p>\n<p>JWT 방식은 XSS, CSRF 등과 같은 요청을 강제로 발생시키는 공격에 여전히 취약하기도 하며, 따라서 보안을 위해서 이와 같은 방식을 선택했습니다.</p>\n<br>  \n보안 공격과 관련된 간단한 사례를 들어보겠습니다.\n<br> \n<p>CSRF</p>\n<p>사용자 브라우저에 AAA.com 의 인증 정보인, 엑세스 토큰이 쿠키로 저장되어 있습니다.</p>\n<p>이 때 BBB.com 이라는 악성 웹사이트가 img 태그나 하이퍼링크를 통해 서버에 DELETE /userInfo 와 같은 요청을 한다면, 이 요청은 브라우저의 인증 쿠키가 포함된 채로 서버로 전송되고, 서버는 이를 정상적인 요청으로 간주하여 사용자 정보를 삭제해버립니다.</p>\n<br> \nXSS\n<p>AAA.com의 게시판에 해커가 브라우저의 쿠키를 참조하여 자동으로 서버에 요청을 보내는 script 태그를 심어놓았습니다. 웹 페이지가 렌더링 되자마자 해당 코드가 작동해 클라이언트 모르게 서버로 요청이 전송됩니다.</p>\n<br> \n<p>사실 요즘은 위 두 가지 경우는 대부분의 사이트에서 방어가 되어 있긴 합니다.</p>\n<p>CSRF의 경우 referrer 검사, csrf 토큰 검증, double submit 쿠키 검증과 같은 방식으로 방어할 수 있습니다.</p>\n<p>XSS의 경우에는 클라이언트 차원에서 태그 입력 방지(이스케이프 문자열) 같은 방법으로 충분히 대응할 수 있습니다.</p>\n<p>하지만 위와 같은 방식이 100% 방어한다는 보장이 없기 때문에, 해당 공격에 노출되었다는 가정하에 위조된 요청을 어떻게 방어할지에 대한 고민도 필요하다는 생각이 들었습니다.</p>\n<p><br> <br></p>\n<h3 id=\"토큰-교환-전략\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0-%EA%B5%90%ED%99%98-%EC%A0%84%EB%9E%B5\" aria-label=\"토큰 교환 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰 교환 전략</h3>\n<br> \n1. Refresh Token은 쿠키에, Access Token은 Response Body로 전달한다.\n<br> \n<p>HttpOnly 쿠키를 활용해 JavaScript 코드가 침투하는 것을 막을 수 있습니다.</p>\n<p>리프레시 토큰을 HTTPOnly 쿠키로 전달한다면, Client-Side JavaScript 가 이 쿠키에 접근할 수 없습니다. 이렇게 하면 XSS 공격을 방지할 수 있습니다. 클라이언트 단에서 로컬 혹은 세션 storage에 값을 저장할 일도 없어, 더 안전하다고 볼 수 있습니다.</p>\n<br> \n<p>이러한 이유들로 인해 어플리케이션에서 Refresh Token을 쿠키에 넣는 경우가 많다고 합니다.</p>\n<p>따라서 이 방식은 서버에서 refresh token을 따로 저장하지 않고도, 토큰의 유효성 검사를 쉽게 할 수 있게 됩니다.</p>\n<br> \n<p>단점으로는 쿠키는 크로스 도메인 제한이 있기 때문에 관리가 복잡해질 수 있고, 쿠키의 크기가 아주 큰 경우에는 네트워크 트래픽 낭비를 야기할 수도 있습니다.</p>\n<p><br> <br>\n2. Refresh Token은 DB에 저장, Access Token만 Response Body 에 전달한다.</p>\n<br> \n<p>이것이 저희 프로젝트에서 채택한 방법입니다.</p>\n<p>리프레시 토큰을 DB단에 저장하고 클라이언트는 Bearer 방식으로 엑세스 토큰을 전달해줍니다.</p>\n<br>  \n<p>엑세스 토큰의 유효기간이 만료되면 Refresh Token 이 유효하다면, 엑세스 토큰을 재발급해줍니다. 클라이언트는 refresh token을 가지고 있지 않습니다.</p>\n<p>하지만 개발 후에, 해당 방식이 바람직한지에 대한 의문이 들었습니다.</p>\n<br>  \n<p>프론트는 엑세스 토큰만 가지고 만료된 엑토큰으로 서버에 접근시, 서버 DB에서 저장된 리프레시 토큰으로 엑세스 토큰을 재발급한다.</p>\n<p>-> ????</p>\n<p>리프레시 토큰을 서버에만 저장하고 프론트에는 주지 않는다면, 그건 엑세스 토큰을 발급해주는 자판기에 불과하다는 생각이 들었습니다.</p>\n<br> \n<p>따라서 이 방식은 적절하지 않다고 생각이 바뀌었습니다.</p>\n<p>한 번 엑세스 토큰이 탈취되면, 해커가 계속해서 엑세스 토큰을 재발급 받을 수 있으니까요. 이는 큰 문제입니다.</p>\n<br> \n<p>따라서 두 토큰 모두 클라이언트에게 발급해 주고, 클라이언트가 유효한 Access Token, Refresh Token을 서버에 제시해야 한다는 생각이 들었습니다.</p>\n<p>프론트에서 리프레시 토큰을 제시해주어야 내가 누구인지, 권한이 있는지를 증명할 수 있을 것입니다.</p>\n<p><br> <br></p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<br> \n따라서 1번 + 2번 방식을 모두 채택하는 것이 더 나은 방법이라고 생각합니다.  \n<br> <br> \nRefreshToken은 쿠키에, AccessToken은 응답으로 제공하고 거기에 DB에 리프레시 토큰을 저장해서 유효성 검사를 하는 것입니다.  \n<p>DB에 리프레시 토큰을 저장하면 문제 발생 시 DB에 있는 리프레시 토큰을 지워서 대처하는 등 서버쪽에서 능동적으로 대처할 수 있는 일이 많을 것이라 생각합니다.</p>\n<br> \n<p>또한 Refresh Token이 사용될 때마다 새로운 access token과 함께 refresh token을 발급하여 이전에 발급된 토큰들을 사용 불가능하게 바꾸는 방법을 추가해도 좋을 것 같습니다. RTR(Refresh Token Rotation)</p>\n <br> \n<p>사실상 완벽한 보안은 없습니다. 인증 방식에는 서로 장단점이 존재하며 상황에 맞게 사용해야 될 것 같다는 것을 느꼈습니다.</p>\n<p>브라우저와 서버 모두 보안에 신경쓰고 대비를 하는 것이 최선일 것 같습니다.</p>\n<p>토큰 교환 전략은 팀원분들과 충분한 회의를 거친 후, 그대로 갈 지 바꿀 지 정할 생각입니다.</p>","frontmatter":{"date":"February 02, 2024","title":"(JWT) Access Token 과 Refresh Token 저장 및 관리에 대한 고민","categories":"Backend","author":"하정수","emoji":"✏"},"fields":{"slug":"/b-login/index2/"}},"site":{"siteMetadata":{"siteUrl":"https://flow-team-project.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/b-login-jwt/","nextSlug":"/b-login/","prevSlug":"/b-login/index2/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}