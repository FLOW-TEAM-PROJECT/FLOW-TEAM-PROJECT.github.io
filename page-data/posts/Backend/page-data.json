{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Backend","result":{"pageContext":{"currentCategory":"Backend","categories":["All","Backend","Convention"],"edges":[{"node":{"id":"de8558dc-499a-5a84-9650-37b9ed8a4be8","excerpt":"본 포스팅에서는 프로젝트에서 구현한  사용자 인증 및 인가 구현 과정을 살펴보고자 합니다. 이를 통해 회원가입, 로그인, 로그아웃 기능을 구현하였습니다. Spring Security 동작 방식 스프링 시큐리티는 애플리케이션에서 인증/인가에 대한 설정을 편리하게 할 수 있도록 도와줍니다. 위 사진은 일반적인 Spring 서버에서 요청을 처리하는 구조를 나타내는 그림입니다. 서블릿 컨테이너 안에는 서블릿에 도달하기 전에 요청을 순차적으로 처리하는 필터들의 집합인, FilterChain 이라는 것이 있습니다. FilterChain(서블릿 컨테이너) 클라이언트로부터 들어오는 모든 HTTP 요청은 일단 Servlet Container(톰캣)에 의해 처리됩니다. FilterChain은 순서대로 요청을 필터링하고 마지막 필터가 처리를 완료하면, 요청은 DispatcherServlet으로 전달됩니다. DelegatingFilterProxy Spring의 ApplicationContext에서 Fi…","fields":{"slug":"/b-login/"},"frontmatter":{"categories":"Backend","title":"Spring Security를 이용한 인증/인가 구현","date":"February 01, 2024"}},"next":{"fields":{"slug":"/b-improve-query/"}},"previous":null},{"node":{"id":"8b868113-03c0-5a76-b495-aadd07c24a27","excerpt":"추천/비추천 로직 개선 Q&A 추천/비추천 로직을 이전에는 아래와 같이 작성했다. 기존 추천/비추천 로직은 다음과 같다. qnaId, memberId를 이용해 추천/비추천 데이터를 findById로 받아온다. 만약 데이터가 있는 경우, 아래와 같이 데이터를 처리한다. (추천 로직 기준으로 설명한다.) ,  여부를 받아온다. 만약 상태가 추천이라면, 삭제가 안 된 경우 추천 취소로 인식하고 해당 데이터를 삭제한다. 상태가 추천인데 삭제된 경우 다시 복구 시킨다. (다시 추천) 상태가 비추천인 경우, 만약 해당 데이터가 삭제되었으면 복구 후 추천 상태로 변경한다. (B → G) 데이터가 없는 경우 새로 만들어준다. 하지만 생각해보니,, 데이터를 굉장히 비효율적으로 처리한다는 생각이 들었다. 🥲 일반적으로 쿼리를 두번 사용하는 것보다 한 번에 요청하는 것이 더 효율적인 것으로 알고 있다. 그래서 고민 끝에 쿼리를 아래와 같이 수정해 로직을 개선했다. 개선한 점은 다음과 같다. ,  여부…","fields":{"slug":"/b-improve-query/"},"frontmatter":{"categories":"Backend","title":"Q&A 추천/비추천, Q&A 스크랩 - 바인딩 변수 사용, 쿼리문 및 로직 개선","date":"February 01, 2024"}},"next":{"fields":{"slug":"/b-branch-convention/"}},"previous":{"fields":{"slug":"/b-login/"}}},{"node":{"id":"c708287e-906e-5b9e-8d29-bb405931656b","excerpt":"Branch type 브랜치 전략은 간략한 Git flow 전략을 사용합니다. main (master) : 개발 서버 배포를 위한 브랜치 #{issue number}/name : 기능 구현을 위한 브랜치 Branch Naming 브랜치명은 반드시 소문자로만 작성해주시고, 케밥 케이스로 작성합니다. name은 스프린트를 영어로 요약하여 작성해주세요.","fields":{"slug":"/b-branch-convention/"},"frontmatter":{"categories":"Backend Convention","title":"Backend Branch Convention","date":"December 26, 2023"}},"next":{"fields":{"slug":"/b-code-convention/"}},"previous":{"fields":{"slug":"/b-improve-query/"}}},{"node":{"id":"542744eb-44d1-5e84-bf70-c085befdefe0","excerpt":"Version Guide java version: v11 Code Style Guide 코드의 는 최대 120자를 넘지 않도록 합니다. 하나의 메소드는 하나의 역할만 수행하도록 작성합니다. 메소드의 매개변수가 4개 이상일 시 별도의 객체를 만들어 전달합니다. 코드 작성 시 스타일은 카멜 케이스로 작성해주세요. 변수는 명사형으로, 메소드(함수)는 동사형으로 작성해주세요. 자주 사용하는 혹은 불변하지 않는 값은 enum이나 final로 선언해주세요. 접근 제어, 인터페이스/구현부 분리 등의 캡슐화를 최대한 지키며 코드를 작성합니다. Backend의 경우 폴더명(패키지)은 소문자로, 파일명은 카멜 케이스로 작성해주세요. Backend의 경우 문자열 작성 시  사용해주세요. CRUD method의 경우 다음과 같은 네이밍을 사용합니다. 동작 Repository Service Create insertXXX createXXX Read findXX(ByXXAnd/OrYY) getXX(ByXXA…","fields":{"slug":"/b-code-convention/"},"frontmatter":{"categories":"Backend Convention","title":"Backend Code Convention","date":"December 26, 2023"}},"next":{"fields":{"slug":"/b-commit-convention/"}},"previous":{"fields":{"slug":"/b-branch-convention/"}}},{"node":{"id":"890a2081-c4cd-5af0-a028-6e6b67b42a5b","excerpt":"Commit Message Form 은 첫 줄 작성 후 엔터를 누르면 작성할 수 있습니다. (선택 사항) 사용 예시  Type 메세지 타입은 반드시 소문자를 사용해주세요. Type Description feat 새로운 기능 추가 시 사용합니다. fix 오류 수정 시 사용합니다. docs README.md 등의 문서 작성 및 수정 시 사용합니다. style 들여쓰기, 케이스 등 코드 스타일 변경 시 사용합니다. (ex. 카멜 케이스 → 스네이크 케이스) refactor 불필요한 코드 삭제, 코드 리팩토링 등의 전반적인 프로젝트 리팩토링 시 사용합니다. test 테스트 코드 작성 시 사용합니다. ci/cd CI/CD 설정 파일 수정 시 사용합니다. hotfix 치명적인 오류를 급히 수정할 때 사용합니다. rename 파일 이름 변경 시 사용합니다. perf 성능 개선 시 사용합니다. chore 기타 사소한 수정 시 사용합니다. Message 메세지는 ‘~다’로 끝나지 않으며, 한 줄로…","fields":{"slug":"/b-commit-convention/"},"frontmatter":{"categories":"Backend Convention","title":"Backend Commit Convention","date":"December 26, 2023"}},"next":{"fields":{"slug":"/b-issue-pr-convention/"}},"previous":{"fields":{"slug":"/b-code-convention/"}}},{"node":{"id":"249e2637-1ff0-5fc2-a8aa-a945e54be2cb","excerpt":"Issue Guide 각 목적에 맞는 이슈 템플릿을 사용합니다. 이슈 제목은 스프린트를 한 줄로 요약해서 작성해주세요. 라벨은  등 상황에 맞는 라벨을 달아주세요. 는 각 스프린트의 담당자를 지정합니다. PR 시 완료 라벨을 달아주시고, Merge되면 해당 이슈를 반드시 닫아줍니다. (PR에서 설정) 커밋 메세지 작성 시 반드시 이슈 번호를 달아 커밋 메세지를 해당 이슈에서 볼 수 있도록 합니다. PR Guide PR 템플릿을 사용하여 최대한 상세하게 작성합니다. PR 제목은 이슈 제목과 일치시켜주세요. 는 코드 리뷰어 및 테스터를 설정합니다. Approved 승인 없이는 절대 Merge하지 않습니다. 승인 전 반드시 오류가 없는지 테스트해주시고, 코드 컨벤션을 지켰는지 확인해주세요. Merge target은 반드시  브랜치로 지정해주세요. PR을 보내기 전 반드시 pull을 받아 최신 상태를 유지해주세요.","fields":{"slug":"/b-issue-pr-convention/"},"frontmatter":{"categories":"Backend Convention","title":"Backend Issue/PR Convention","date":"December 26, 2023"}},"next":null,"previous":{"fields":{"slug":"/b-commit-convention/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}