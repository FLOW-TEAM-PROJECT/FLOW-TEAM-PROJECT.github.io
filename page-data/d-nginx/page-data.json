{"componentChunkName":"component---src-templates-blog-template-js","path":"/d-nginx/","result":{"data":{"cur":{"id":"344b0233-dd1d-5fa0-8b3b-55ac3b63dc21","html":"<p>Nginx 기존 설정 파일은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">events {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream backend {\n        server localhost:8080;\n    }\n\n    server {\n        listen 80;\n\n        location /api {\n            proxy_pass http://backend/api;\n            add_header 'Access-Control-Allow-Origin' '*';\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Origin \"\";\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Host $http_host;\n        }\n    }\n}</code></pre></div>\n<p>하지만 원인을 알 수 없는 CORS 오류가 자꾸 발생했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Access to XMLHttpRequest at \n'http:///api/email- join:1 verifications' \nfrom origin \"http://localhost:3000' has been blocked by CORS policy: \nRequest header field content-type is not allowed by Access-Control-Allow-Headers \nin preflight response.</code></pre></div>\n<p>Frontend, Backend 코드 모두 뜯어보고 고쳐보았으나 전혀 방법이 없었는데, <strong>시험 삼아 nginx를 거치지 않고 요청을 보내보니 잘 전송되는 것을 확인할 수 있었다. 😨</strong></p>\n<p>즉, CORS의 원인은 nginx 때문이었던 것!</p>\n<h2 id=\"nginx-cors-오류-수정하기\" style=\"position:relative;\"><a href=\"#nginx-cors-%EC%98%A4%EB%A5%98-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"nginx cors 오류 수정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nginx CORS 오류 수정하기</h2>\n<ol>\n<li>\n<p>처음에 <code class=\"language-text\">Access-Control-Allow-Origin</code> 옵션을 적용할 경우 원본 서버의 헤더가 있는 경우 <code class=\"language-text\">proxy_hide_header Access-Control-Allow-Origin;</code> 을 추가하면 해결된다고 하여 추가했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">location /api {\n\t    proxy_pass http://backend/api;\n\t\t\tproxy_hide_header Access-Control-Allow-Origin;\n\t    add_header 'Access-Control-Allow-Origin' '*';\n\t    proxy_http_version 1.1;\n\t    proxy_set_header Upgrade $http_upgrade;\n\t    proxy_set_header Connection \"upgrade\";\n\t    proxy_set_header Origin \"\";\n\t    proxy_set_header X-Real-IP $remote_addr;\n\t    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t    proxy_set_header Host $http_host;\n}</code></pre></div>\n</li>\n<li>\n<p>하지만, CORS오류는 여전히 해결되지 않았고, 아래와 같이 와일드 카드를 제거하고 <code class=\"language-text\">withCredentials</code> 옵션을 추가했다. (이 옵션은 추후 쿠키 사용을 위해 추가한 것도 있다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">events {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream backend {\n        server localhost:8080;\n    }\n\n    server {\n        listen 80;\n\n        location /api {\n            proxy_pass http://backend/api;\n            add_header 'Access-Control-Allow-Credentials' 'true';\n            add_header 'Access-Control-Allow-Origin' 'http://localhost:3000';\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Origin \"\";\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Host $http_host;\n        }\n    }\n}</code></pre></div>\n<p><del>그러나 여전히 해결되지 않았다………ㅠ_ㅠ</del></p>\n</li>\n<li>\n<p>위 오류 메세지를 다시 참고했는데, Request header field content-type is not allowed by Access-Control-Allow-Headers</p>\n</li>\n</ol>\n<p>in <strong>preflight response. 즉, preflight 요청 시 발생하는 문제인 것 같다는 생각이 들어 preflight 요청 시 사용하는 OPTIONS 메소드로 요청이 들어왔을 때 아래와 같이 설정했다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```\nif ($request_method = 'OPTIONS') {\n\t    add_header 'Access-Control-Allow-Origin' $allowed_origin always;\n\t    add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, OPTIONS';\n\t    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';\n\t    add_header 'Access-Control-Allow-Credentials' 'true';\n\t    return 204;\n}\n```</code></pre></div>\n<ol start=\"4\">\n<li>\n<p>결과적으로 아주 잘 동작했다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">events {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream backend {\n        server localhost:8080;\n    }\n\n    server {\n        listen 80;\n\n        location /api {\n            if ($request_method = 'OPTIONS') {\n                add_header 'Access-Control-Allow-Origin' 'http://localhost:3000';\n                add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, OPTIONS';\n                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';\n                add_header 'Access-Control-Allow-Credentials' 'true';\n                return 204;\n            }\n\n            proxy_pass http://backend/api;\n            add_header 'Access-Control-Allow-Credentials' 'true';\n            add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Origin \"\";\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Host $http_host;\n        }\n    }\n}</code></pre></div>\n</li>\n</ol>\n<h2 id=\"nginx-여러-도메인의-요청-허용하기\" style=\"position:relative;\"><a href=\"#nginx-%EC%97%AC%EB%9F%AC-%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%98-%EC%9A%94%EC%B2%AD-%ED%97%88%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"nginx 여러 도메인의 요청 허용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nginx 여러 도메인의 요청 허용하기</h2>\n<p>우리 팀은 vercel을 이용해 배포하기 때문에 localhost뿐만 아니라 vercel 주소도 따로 추가해야했다.</p>\n<p>그래서 아무 생각 없이 아래처럼 설정 파일을 수정했다. (당연히 안됐다..^_^)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">add_header 'Access-Control-Allow-Origin' 'http://localhost:3000, https://devridge-client.vercel.app';</code></pre></div>\n<p>nginx는 Access-Control-Allow-Origin 옵션은 하나밖에 설정이 안된다고 한다.</p>\n<p>그래서 여러 도메인을 허용하려면 동적으로 설정하면 된다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">map $http_origin $allowed_origin {\n    default \"\";\n    \"http://localhost:3000\" $http_origin;\n    \"https://devridge-client.vercel.app\" $http_origin;\n}\n\nadd_header 'Access-Control-Allow-Origin' $allowed_origin always;</code></pre></div>\n<h2 id=\"https-설정하기\" style=\"position:relative;\"><a href=\"#https-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"https 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>https 설정하기</h2>\n<p>우리 팀은 무중단 배포 때문에 nginx를 blue버전과 green 버전 두 가지로 나누어 사용하고 있었고, https의 경우 certbot을 사용하고 있었다.</p>\n<p>이로 인해 애플리케이션이 새로 배포될 때마다 nginx 설정 파일이 바뀌기 때문에 https 인증이 풀리는 문제가 발생한다.</p>\n<ol>\n<li>\n<p>처음에 배포 스크립트에 <code class=\"language-text\">sudo certbot renew --nginx</code> 를 추가하면 될 줄 알았으나 여전히 동작하지 않았다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">nginx.conf</code> 파일 자체를 보니 https 설정 시 아래와 같은 코드가 추가되는 것을 확인했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server_name devridge6.duckdns.org;\n\nlisten 443 ssl; # managed by Certbot\n      ssl_certificate /etc/letsencrypt/live/devridge6.duckdns.org/fullchain.pem; # managed by Certbot\n      ssl_certificate_key /etc/letsencrypt/live/devridge6.duckdns.org/privkey.pem; # managed by Certbot\n      include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n      ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n}\n\nserver {\n\t\t  if ($host = devridge6.duckdns.org) {\n\t\t           return 301 https://$host$request_uri;\n\t\t  } # managed by Certbot\n\t\t\n\t\t  server_name devridge6.duckdns.org;\n\t\t  listen 80;\n\t\t  return 404; # managed by Certbot\n}</code></pre></div>\n</li>\n<li>\n<p>위 코드를 참고하여 nginx.blue.conf, nginx.green.conf에 위 코드를 복사/붙여넣기 하고 배포 스크립트를 설정하니 https가 끊기지 않고 잘 동작하는 것을 확인할 수 있다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">events {\n    worker_connections 1024;\n}\n\nhttp {\n    map $http_origin $allowed_origin {\n        default \"\";\n        \"http://localhost:3000\" $http_origin;\n        \"https://devridge-client.vercel.app\" $http_origin;\n    }\n\n    upstream backend {\n        server localhost:8080;\n    }\n\n    server {\n\n        server_name devridge6.duckdns.org;\n\n        location /api {\n            if ($request_method = 'OPTIONS') {\n                add_header 'Access-Control-Allow-Origin' $allowed_origin always;\n                add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, OPTIONS';\n                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';\n                add_header 'Access-Control-Allow-Credentials' 'true';\n                return 204;\n            }\n\n            proxy_pass http://backend/api;\n            add_header 'Access-Control-Allow-Origin' $allowed_origin always;\n            add_header 'Access-Control-Allow-Credentials' 'true';\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Origin \"\";\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Host $http_host;\n        }\n\n        listen 443 ssl; # managed by Certbot\n        ssl_certificate /etc/letsencrypt/live/devridge6.duckdns.org/fullchain.pem; # managed by Certbot\n        ssl_certificate_key /etc/letsencrypt/live/devridge6.duckdns.org/privkey.pem; # managed by Certbot\n        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n    }\n\n    server {\n        if ($host = devridge6.duckdns.org) {\n                 return 301 https://$host$request_uri;\n        } # managed by Certbot\n\n        server_name devridge6.duckdns.org;\n        listen 80;\n        return 404; # managed by Certbot\n    }\n}</code></pre></div>\n</li>\n</ol>\n<p>최종적으로 설정한 nginx 파일은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">events {\n    worker_connections 1024;\n}\n\nhttp {\n    map $http_origin $allowed_origin {\n        default \"\";\n        \"http://localhost:3000\" $http_origin;\n        \"https://devridge-client.vercel.app\" $http_origin;\n    }\n\n    upstream backend {\n        server localhost:8080;\n    }\n\n    server {\n\n        server_name devridge6.duckdns.org;\n\n        location /api {\n            if ($request_method = 'OPTIONS') {\n                add_header 'Access-Control-Allow-Origin' $allowed_origin always;\n                add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, OPTIONS';\n                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';\n                add_header 'Access-Control-Allow-Credentials' 'true';\n                return 204;\n            }\n\n            proxy_pass http://backend/api;\n            add_header 'Access-Control-Allow-Origin' $allowed_origin always;\n            add_header 'Access-Control-Allow-Credentials' 'true';\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Origin \"\";\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Host $http_host;\n        }\n\n        listen 443 ssl; # managed by Certbot\n        ssl_certificate /etc/letsencrypt/live/devridge6.duckdns.org/fullchain.pem; # managed by Certbot\n        ssl_certificate_key /etc/letsencrypt/live/devridge6.duckdns.org/privkey.pem; # managed by Certbot\n        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n    }\n\n    server {\n        if ($host = devridge6.duckdns.org) {\n                 return 301 https://$host$request_uri;\n        } # managed by Certbot\n\n        server_name devridge6.duckdns.org;\n        listen 80;\n        return 404; # managed by Certbot\n    }\n}</code></pre></div>\n<h2 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h2>\n<ul>\n<li><a href=\"https://bobbyhadz.com/blog/the-value-of-the-access-control-allow-origin-header-in-the-response\">https://bobbyhadz.com/blog/the-value-of-the-access-control-allow-origin-header-in-the-response</a></li>\n<li><a href=\"https://greeng00se.tistory.com/119\">https://greeng00se.tistory.com/119</a></li>\n<li><a href=\"https://www.juannicolas.eu/how-to-set-up-nginx-cors-multiple-origins/\">https://www.juannicolas.eu/how-to-set-up-nginx-cors-multiple-origins/</a></li>\n<li><a href=\"https://sasohan.github.io/2022/09/08/enable-corss-origin-cors-in-nginx/\">https://sasohan.github.io/2022/09/08/enable-corss-origin-cors-in-nginx/</a></li>\n<li><a href=\"https://jay-ji.tistory.com/72\">https://jay-ji.tistory.com/72</a></li>\n<li><a href=\"https://sedangdang.tistory.com/301\">https://sedangdang.tistory.com/301</a></li>\n<li><a href=\"https://codedbyjst.tistory.com/13\">https://codedbyjst.tistory.com/13</a></li>\n</ul>","excerpt":"Nginx 기존 설정 파일은 아래와 같다. 하지만 원인을 알 수 없는 CORS 오류가 자꾸 발생했다. Frontend, Backend 코드 모두 뜯어보고 고쳐보았으나 전혀 방법이 없었는데, 시험 삼아 nginx를 거치지 않고 요청을 보내보니 잘 전송되는 것을 확인할 수 있었다. 😨 즉, CORS의 원인은 nginx 때문이었던 것! nginx CORS 오류 수정하기 처음에  옵션을 적용할 경우 원본 서버의 헤더가 있는 경우  을 추가하면 해결된다고 하여 추가했다. 하지만, CORS오류는 여전히 해결되지 않았고, 아래와 같이 와일드 카드를 제거하고  옵션을 추가했다. (이 옵션은 추후 쿠키 사용을 위해 추가한 것도 있다.) 그러나 여전히 해결되지 않았다………ㅠ_ㅠ 위 오류 메세지를 다시 참고했는데, Request header field content-type is not allowed by Access-Control-Allow-Headers in preflight response. 즉…","frontmatter":{"date":"February 20, 2024","title":"Nginx CORS + https 설정 문제 해결하기","categories":"DevOps","author":"유희진","emoji":"☁️"},"fields":{"slug":"/d-nginx/"}},"next":{"id":"5eee406a-d5c6-5c55-bef0-c68223ae6dbf","html":"<h2 id=\"vpcvirtual-private-cloud\" style=\"position:relative;\"><a href=\"#vpcvirtual-private-cloud\" aria-label=\"vpcvirtual private cloud permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VPC(Virtual Private Cloud)</h2>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/c888fb7f-d6f4-463e-a38b-9e5a43ec732e\" alt=\"image\">\n<a href=\"https://velog.io/@server30sopt/VPC-%EC%84%9C%EB%B8%8C%EB%84%B7-%EC%84%A4%EC%A0%95%EC%9C%BC%EB%A1%9C-RDS%EC%97%90-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\">https://velog.io/@server30sopt/VPC-서브넷-설정으로-RDS에-안전하게-접근하기</a></p>\n<ul>\n<li>\n<p>물리적으로는 같은 클라우드 상에 있으나, <strong>보안상의 목적을 위해 논리적으로 다른 클라우드인 것처럼 동작하도록 만든 가상 클라우드 환경</strong></p>\n</li>\n<li>\n<p>VPC 별로 다른 네트워크를 설정할 수 있으며, 독립된 네트워크처럼 작동한다.</p>\n</li>\n<li>\n<p>만약 VPC를 설정하지 않은 경우 아래와 같은 구조를 띈다.\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/2ed11c0a-7625-4327-9d10-6a969b84a3f3\" alt=\"image\"></p>\n</li>\n<li>\n<p>하나의 VPC는 하나의 Region 내에서만 생성이 가능하지만, 두 개 이상의 리전에 걸치는 것은 불가능하다.</p>\n</li>\n<li>\n<p>하지만 하나의 VPC는 여러개의 Amazon Availability Zone에 걸쳐서 생성될 수 있다.</p>\n</li>\n</ul>\n<h3 id=\"vpc-구조\" style=\"position:relative;\"><a href=\"#vpc-%EA%B5%AC%EC%A1%B0\" aria-label=\"vpc 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VPC 구조</h3>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/eec45e4a-4b03-4d09-9f76-06678aed4e65\" alt=\"image\"></p>\n<h2 id=\"서브넷subnet\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B8%8C%EB%84%B7subnet\" aria-label=\"서브넷subnet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서브넷(Subnet)</h2>\n<ul>\n<li>보안, 통신 성능 향상 등을 목적으로 VPC를 쪼갠 단위</li>\n</ul>\n<h3 id=\"public-subnet\" style=\"position:relative;\"><a href=\"#public-subnet\" aria-label=\"public subnet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Public Subnet</h3>\n<ul>\n<li>외부에서 접근 가능한 네트워크 영역</li>\n<li>인터넷 게이트웨이, ELB, Public IP / Elastic IP를 가진 인스턴스를 내부에 가지고 있다.</li>\n</ul>\n<h3 id=\"private-subnet\" style=\"position:relative;\"><a href=\"#private-subnet\" aria-label=\"private subnet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Private Subnet</h3>\n<ul>\n<li>외부에서 접근이 불가능한 네트워크 영역</li>\n<li>NAT 게이트웨이를 사용하면 내부에서 외부로는 접근이 가능하다.</li>\n<li>일반적으로 중요한 리소스들을 엄격하게 관리하기 위해 사용된다.</li>\n</ul>\n<h2 id=\"cidr\" style=\"position:relative;\"><a href=\"#cidr\" aria-label=\"cidr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CIDR</h2>\n<ul>\n<li>CIDR란 Classless Inter-Domain Routing으로, <strong>클래스 없는 도메인 간 라우팅 기법이라는 뜻이다.</strong>\n<ul>\n<li>즉, 도메인 간의 라우팅에 사용되는 인터넷 주소를 원래 IP 주소 클래스 체계를 쓰는 것보다 능동적으로 할당하여 지정하는 방식</li>\n</ul>\n</li>\n<li>기존에는 Class로 A, B, C, D, E로 나누어 네트워크를 사용했는데, 클래스로 나누게 되는 경우 IP 유연성이 떨어지고 IP의 개수가 많기 때문에 좀 더 유연하게 사용하고자 CIDR라는 개념이 등장했다.</li>\n<li>주소의 영역을 여러 네트워크 영역으로 나누기 위해 IP를 묶는 방식으로, IP 주소 범위를 정의하는 방식</li>\n</ul>\n<h3 id=\"cidr-블록\" style=\"position:relative;\"><a href=\"#cidr-%EB%B8%94%EB%A1%9D\" aria-label=\"cidr 블록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CIDR 블록</h3>\n<ul>\n<li>CIDR블록 = 서브넷</li>\n<li>예를 들어, <code class=\"language-text\">192.168.0.0/16</code> 대역망이 있을 때, 아래 사진은 이 대역망을 세 개의 네트워크 단위인 서브넷으로 쪼갠 것이다.\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/e2a7ba46-3fa0-4c37-847d-ddb79dbf0da1\" alt=\"image\"></li>\n</ul>\n<h2 id=\"natnetwork-address-translation-gateway\" style=\"position:relative;\"><a href=\"#natnetwork-address-translation-gateway\" aria-label=\"natnetwork address translation gateway permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NAT(Network Address Translation) Gateway</h2>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/d5e029b1-1bb0-4c59-bf66-ba92d2014793\" alt=\"image\"></p>\n<p><a href=\"https://kimjingo.tistory.com/180\">https://kimjingo.tistory.com/180</a></p>\n<ul>\n<li>Private 서브넷의 인스턴스가 VPC 외부의 서비스에 연결할 수 있지만, 외부 서비스에서는 연결할 수 없도록 하는 게이트웨이 서비스</li>\n<li>즉, 외부 서비스에서 private 서브넷 인스턴스로 접근할 수 없게 하되, private 서브넷의 인스턴스에서는 외부 서비스로 접근할 수 있게 도와주는 서비스</li>\n<li>NAT 게이트웨이를 사용하면 <strong>private 서브넷의 스트리밍 인스턴스가 인터넷 또는 다른 AWS 서비스에 연결할 수 있지만 인터넷에서 해당 인스턴스와의 연결을 시작하지 못하도록</strong> 할 수 있다.</li>\n</ul>\n<h2 id=\"인터넷-게이트웨이\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%EB%84%B7-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4\" aria-label=\"인터넷 게이트웨이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터넷 게이트웨이</h2>\n<ul>\n<li><strong>VPC의 인스턴스와 인터넷 간에 통신을 할 수 있게</strong> 해주는 게이트웨이</li>\n<li>만약 인터넷으로 데이터를 보내야한다면 당연히 인터넷 게이트웨이로 트래픽을 전달해야 한다.</li>\n<li><strong>서브넷이 인터넷 게이트웨이로 향하는 라우팅이 있는 경우 퍼블릭(Public) 서브넷</strong>이라 부르며, 반대로 어떤 서브넷이 <strong>인터넷 연결을 할 필요가 없다면 해당 서브넷은 프라이빗(Private) 서브넷</strong>이라고 부른다.</li>\n</ul>\n<h2 id=\"aclnetwork-access-control-list\" style=\"position:relative;\"><a href=\"#aclnetwork-access-control-list\" aria-label=\"aclnetwork access control list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ACL(Network Access Control list)</h2>\n<ul>\n<li>네트워크 엑세스 제어 목록</li>\n<li>VPC를 위한 하나 이상의 서브넷에서 들어오고 나가는 트래픽을 제어하기 위한 방화벽 역할을 하는 보안 계층</li>\n<li>VPC에 보안 그룹과 비슷한 추가적인 보안 계층을 추가하기 위해 ACL을 설정할 수 있다.</li>\n<li>보안 그룹은 인스턴스 단에서 보안을 실행한다면, ACL은 서브넷 단에서 보안을 수행한다.</li>\n</ul>\n<h3 id=\"보안-그룹과-acl-비교\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88-%EA%B7%B8%EB%A3%B9%EA%B3%BC-acl-%EB%B9%84%EA%B5%90\" aria-label=\"보안 그룹과 acl 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안 그룹과 ACL 비교</h3>\n<table>\n<thead>\n<tr>\n<th>보안그룹</th>\n<th>네트워크 ACL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>인스턴스 단에서 실행</td>\n<td>서브넷 단에서 실행</td>\n</tr>\n<tr>\n<td>허용(allow) 규칙만 지원</td>\n<td>허용(allow) 및 거부(deny) 규칙 지원</td>\n</tr>\n<tr>\n<td>스테이트풀(stateful): 어떤 규칙과도 관계없이, 반환 트래픽이 자동적으로 허용된다.</td>\n<td>스테이트레스(stateless): 반환 트래픽이 특정 규칙에 의해서 허용된다.</td>\n</tr>\n<tr>\n<td>트래픽을 허용할 것인가에 대한 결정 전 모든 규칙을 평가한다.</td>\n<td>트래픽을 허용할 것인가에 대해 결정할 때 가장 낮은 번호의 규칙부터 시작하여 순서대로 규칙들을 수행한다.</td>\n</tr>\n<tr>\n<td>인스턴스를 시작할 때 보안그룹을 명시하거나 나중에 인스턴스와 보안그룹을 연결할 때에만 인스턴스에 적용된다.</td>\n<td>연결된 서브넷 내 모든 인스턴스에 자동적으로 적용된다. (그리하여, 보안그룹이 너무 관대할 경우, 추가적인 방화벽을 제공한다.)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"elastic-ip\" style=\"position:relative;\"><a href=\"#elastic-ip\" aria-label=\"elastic ip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elastic IP</h2>\n<ul>\n<li>탄력적 IP 주소</li>\n<li>인터넷을 통해 접속할 수 있는 고정적인 공인 IP 주소</li>\n</ul>\n<h2 id=\"라우팅-테이블routing-table\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9A%B0%ED%8C%85-%ED%85%8C%EC%9D%B4%EB%B8%94routing-table\" aria-label=\"라우팅 테이블routing table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라우팅 테이블(Routing table)</h2>\n<ul>\n<li>네트워크 상의 특정 목적지까지의 거리와 가는 방법 등을 명시하고 있는 테이블</li>\n<li>라우터는 어떤 목적지를 찾아갈 때 해당 라우팅 테이블을 보고 찾아간다.</li>\n</ul>\n<h3 id=\"aws에서의-라우팅-테이블\" style=\"position:relative;\"><a href=\"#aws%EC%97%90%EC%84%9C%EC%9D%98-%EB%9D%BC%EC%9A%B0%ED%8C%85-%ED%85%8C%EC%9D%B4%EB%B8%94\" aria-label=\"aws에서의 라우팅 테이블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS에서의 라우팅 테이블</h3>\n<ul>\n<li>서브넷 혹은 게이트웨이를 통해서 네트워크 트래픽이 어디로 향하는지에 대해 결정할 때 사용되는 routes라는 몇가지 룰을 포함한다.</li>\n<li>VPC 내에는 Subnet이 있으며, 각 서브넷은 각기 다른 네트워크 대역을 가지고 있다.</li>\n<li>한 서브넷에서 다른 서브넷으로 가려면 라우팅이 필요하다.</li>\n<li>VPC 내부에 대해서는 자동으로 라우팅이 생성되기 때문에 별다른 설정 없이 한 서브넷에서 다른 서브넷으로 통신이 가능하다.</li>\n</ul>\n<h1 id=\"실제-배포-환경-구축해보기\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-%EB%B0%B0%ED%8F%AC-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"실제 배포 환경 구축해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 배포 환경 구축해보기</h1>\n<p><a href=\"https://jenakim47.tistory.com/14\">[AWS] 사용자지정 VPC 만들어서 Public, Private 서브넷 만들기</a></p>\n<h2 id=\"vpc-생성\" style=\"position:relative;\"><a href=\"#vpc-%EC%83%9D%EC%84%B1\" aria-label=\"vpc 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VPC 생성</h2>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/0e62ac95-1757-4c47-8598-8486aa877a0d\" alt=\"image\"></p>\n<p>우선 해당 프로젝트 배포를 위한 VPC를 위와 같이 생성한다.</p>\n<h2 id=\"subnet-생성\" style=\"position:relative;\"><a href=\"#subnet-%EC%83%9D%EC%84%B1\" aria-label=\"subnet 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>subnet 생성</h2>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/110a45ce-8f83-4867-95d5-e30c20f99192\" alt=\"image\">\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/24ffa4ef-11ea-4267-8e9d-fa580bf89fac\" alt=\"image\">\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/4253b0a8-79bc-4bfe-8006-13870e42d7d3\" alt=\"image\"></p>\n<p>public subnet과 private subnet을 각각 생성한다.</p>\n<p>public subnet은 <code class=\"language-text\">10.0.0.0/24</code>, private subnet은 <code class=\"language-text\">10.0.1.0/24</code> 로 설정한다.</p>\n<p>추후 서브넷을 추가하는 경우 <code class=\"language-text\">10.0.2.0/24</code>, <code class=\"language-text\">10.0.3.0/24</code> … 와 같이 설정한다.</p>\n<h2 id=\"라우팅-테이블-생성\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9A%B0%ED%8C%85-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1\" aria-label=\"라우팅 테이블 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라우팅 테이블 생성</h2>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/60f01793-2ec0-416d-b946-2aca028a97ad\" alt=\"image\">\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/3b41aa93-7cab-46a2-8777-8cd5cb8d9ebf\" alt=\"image\"></p>\n<ul>\n<li>생성 시 <strong>public subnet을 위한 테이블과 private subnet을 위한 테이블을 별도로 생성해야한다.</strong></li>\n</ul>\n<h2 id=\"인터넷-게이트웨이-생성\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%EB%84%B7-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4-%EC%83%9D%EC%84%B1\" aria-label=\"인터넷 게이트웨이 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터넷 게이트웨이 생성</h2>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/a952b6b9-30b0-4b33-a6fe-0a01cf891dca\" alt=\"image\">\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/ce20ad79-2446-477f-9ae5-55a1180ac0b7\" alt=\"image\">\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/2cabce0e-33b7-4555-8c0a-b5d3d3a903c9\" alt=\"image\"></p>\n<ul>\n<li>생성 후 <strong>public 서브넷의 라우팅 테이블에 연결해야 인터넷 사용이 가능</strong>하다.\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/aeab2ff7-1249-44d7-b567-fc153ee43e78\" alt=\"image\"></li>\n</ul>\n<h2 id=\"nat-게이트웨이-생성\" style=\"position:relative;\"><a href=\"#nat-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4-%EC%83%9D%EC%84%B1\" aria-label=\"nat 게이트웨이 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NAT 게이트웨이 생성</h2>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/87cea89f-8772-4775-b8c4-a82cb51690e4\" alt=\"image\"></p>\n<ul>\n<li>NAT 게이트웨이는 public 서브넷에 생성해야한다.</li>\n<li>생성 후 private 서브넷의 라우팅 테이블에 NAT 게이트웨이를 넣어준다.\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/6a683e01-2143-4397-b525-71e18b922730\" alt=\"image\"></li>\n</ul>\n<h2 id=\"acl-설정하기\" style=\"position:relative;\"><a href=\"#acl-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"acl 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ACL 설정하기</h2>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/0e70d11b-dc1c-489d-8003-2fd3b31b27e0\" alt=\"image\"></p>\n<h2 id=\"ec2-생성하기\" style=\"position:relative;\"><a href=\"#ec2-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"ec2 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2 생성하기</h2>\n<p><img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/cb5bd525-4ccf-4464-b62b-88ab4a9aa5e6\" alt=\"image\"></p>\n<ul>\n<li>public subnet에 EC2를 생성한다.</li>\n<li>private subnet에 생성할 경우 퍼블릭 IP는 비활성화해야한다.</li>\n</ul>\n<h1 id=\"생성된-환경에-직접-접속해보기\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EB%90%9C-%ED%99%98%EA%B2%BD%EC%97%90-%EC%A7%81%EC%A0%91-%EC%A0%91%EC%86%8D%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"생성된 환경에 직접 접속해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성된 환경에 직접 접속해보기</h1>\n<h3 id=\"ec2-접속하기\" style=\"position:relative;\"><a href=\"#ec2-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0\" aria-label=\"ec2 접속하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2 접속하기</h3>\n<ul>\n<li>\n<p>처음에 SSH로 접속이 안 됐는데, ACL에서 80만 허용했기 때문에 안되는 것 같아 22번 포트를 추가했다.</p>\n<ul>\n<li>22번 포트를 추가하면 잘 접속된다.</li>\n</ul>\n</li>\n<li>\n<p>그러나 위 상황에서 apt-get update를 하면 오류가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">curl: <span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span> Failed to connect to download.docker.com port <span class=\"token number\">443</span> after <span class=\"token number\">278781</span> ms: Connection timed out\ngpg: no valid OpenPGP data found.</code></pre></div>\n<ul>\n<li>\n<p>원인은 ACL 때문인데, 이때 ACL 설정을 모든 요청 허용으로 변경하면 해결된다. (결국 무용지물이 된 ACL.. ㅠ_ㅠ)\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/26884dca-1c20-40d4-bc58-55e70d558d3d\" alt=\"image\"></p>\n</li>\n<li>\n<p>원인은 잘 모르지만 우선은 보안그룹 내에서 인바운드 규칙을 관리하기로 했다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>여하튼 접속하면 아주 잘 된다!\n<img src=\"https://github.com/devridge-team-project/devridge-team-project.github.io/assets/96467030/9f551ce0-799e-430f-8d49-0094d6eb4816\" alt=\"image\"></p>\n</li>\n</ul>\n<h1 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h1>\n<ul>\n<li><a href=\"https://inpa.tistory.com/entry/AWS-%F0%9F%93%9A-%ED%83%84%EB%A0%A5%EC%A0%81-IP-Elastic-IP-EIP-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">https://inpa.tistory.com/entry/AWS-📚-탄력적-IP-Elastic-IP-EIP-란-무엇인가</a></li>\n<li><a href=\"https://martinkim1954.tistory.com/entry/AWS-ACL-%EB%B0%8F-%EB%B3%B4%EC%95%88%EA%B7%B8%EB%A3%B9-%EB%B9%84%EA%B5%90-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%A0%81%EC%9A%A9\">https://martinkim1954.tistory.com/entry/AWS-ACL-및-보안그룹-비교-생성-및-적용</a></li>\n<li><a href=\"https://tech.cloud.nongshim.co.kr/2018/10/16/4-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0vpc-subnet-route-table-internet-gateway/\">https://tech.cloud.nongshim.co.kr/2018/10/16/4-네트워크-구성하기vpc-subnet-route-table-internet-gateway/</a></li>\n<li><a href=\"https://kimjingo.tistory.com/180\">https://kimjingo.tistory.com/180</a></li>\n<li><a href=\"https://jenakim47.tistory.com/14\">https://jenakim47.tistory.com/14</a></li>\n<li><a href=\"https://velog.io/@server30sopt/VPC-%EC%84%9C%EB%B8%8C%EB%84%B7-%EC%84%A4%EC%A0%95%EC%9C%BC%EB%A1%9C-RDS%EC%97%90-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\">https://velog.io/@server30sopt/VPC-서브넷-설정으로-RDS에-안전하게-접근하기</a></li>\n<li><a href=\"https://pjh3749.tistory.com/283\">https://pjh3749.tistory.com/283</a></li>\n<li><a href=\"https://yoo11052.tistory.com/40\">https://yoo11052.tistory.com/40</a></li>\n<li><a href=\"https://martinkim1954.tistory.com/entry/AWS-%EB%9D%BC%EC%9A%B0%ED%8C%85%ED%85%8C%EC%9D%B4%EB%B8%94Route-Table-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%9D%BC%EC%9A%B0%ED%8C%85\">https://martinkim1954.tistory.com/entry/AWS-라우팅테이블Route-Table-생성-및-라우팅</a></li>\n<li><a href=\"https://inpa.tistory.com/entry/WEB-%F0%9F%8C%90-CIDR-%EC%9D%B4-%EB%AC%B4%EC%96%BC-%EB%A7%90%ED%95%98%EB%8A%94%EA%B1%B0%EC%95%BC-%E2%87%9B-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC-%EA%B3%84%EC%82%B0%EB%B2%95\">https://inpa.tistory.com/entry/WEB-🌐-CIDR-이-무얼-말하는거야-⇛-개념-정리-계산법</a></li>\n<li><a href=\"https://algopoolja.tistory.com/97\">https://algopoolja.tistory.com/97</a></li>\n<li><a href=\"https://hstory0208.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-Class%EB%9E%80-CIDR-%EB%9E%80-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EB%B0%8F-%EA%B0%9C%EB%85%90%EC%9D%84-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%B4%EB%B3%B4%EC%9E%90-feat%EC%84%9C%EB%B8%8C%EB%84%B7%ED%8C%85-%EC%8A%88%ED%8D%BC%EB%84%B7%ED%8C%85\">https://hstory0208.tistory.com/entry/네트워크-Class란-CIDR-란-차이점-및-개념을-쉽게-이해해보자-feat서브넷팅-슈퍼넷팅</a></li>\n</ul>","frontmatter":{"date":"February 16, 2024","title":"Server Production 환경 구축하기(1) - VPC와 서브넷으로 EC2 추가하기","categories":"DevOps Cloud","author":"유희진","emoji":"☁️"},"fields":{"slug":"/d-prod-environment-1/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://flow-team-project.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/d-nginx/","nextSlug":"/d-prod-environment-1/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}